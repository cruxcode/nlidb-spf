has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:city:<a,b> $0 $1)))
has :- NP/NP : (lambda $0:e (city:city:<b,t> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:city:<a,b> $0 $1)))
have :- NP/NP : (lambda $0:e (city:city:<b,t> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (capital:capital:<a,b> $0 $1)))
has :- NP/NP : (lambda $0:e (capital:capital:<b,t> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (capital:capital:<a,b> $0 $1)))
have :- NP/NP : (lambda $0:e (capital:capital:<b,t> $0))
state :- NP/NP : (lambda $0:e (state:<a,a> $0))
state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<a,<a,t>> $1 $0)))
city :- NP/NP : (lambda $0:e (city:<a,<a,b>> $0))
city :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<a,<a,<b,t>>> $1 $0)))
capital :- NP/NP : (lambda $0:e (capital:<a,<a,<a,b>>> $0))
capital :- (S\NP)/NP : (lambda $0:e (lambda $1:e (capital:<a,<a,<a,<b,t>>>> $1 $0)))
states :- NP/NP : (lambda $0:e (states:<a,a> $0))
states :- (S\NP)/NP : (lambda $0:e (lambda $1:e (states:<a,<a,t>> $1 $0)))
the state :- NP/NP : (lambda $0:e (the state:<a,<a,a>> $0))
the state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the state:<a,<a,<a,t>>> $1 $0)))
 :- NP/NP : (lambda $0:e (:<a,<a,<a,b>>> $0))
 :- (S\NP)/NP : (lambda $0:e (lambda $1:e (:<a,<a,<a,<b,t>>>> $1 $0)))
 :- NP/NP : (lambda $0:e (:<a,<a,<a,<a,b>>>> $0))
 :- (S\NP)/NP : (lambda $0:e (lambda $1:e (:<a,<a,<a,<a,<b,t>>>>> $1 $0)))
 :- NP/NP : (lambda $0:e (:<a,<a,<a,<a,<a,b>>>>> $0))
 :- (S\NP)/NP : (lambda $0:e (lambda $1:e (:<a,<a,<a,<a,<a,<b,t>>>>>> $1 $0)))
 :- NP/NP : (lambda $0:e (:<a,<a,<a,<a,<a,<a,b>>>>>> $0))
 :- (S\NP)/NP : (lambda $0:e (lambda $1:e (:<a,<a,<a,<a,<a,<a,<b,t>>>>>>> $1 $0)))
 :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 state:<a,a>))
 :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 state:<a,a>))
 :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 city:<a,b>))
 :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 city:<a,b>))
 :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 capital:<a,b>))
 :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 capital:<a,b>))
 :- PP/NP : (lambda $0:e (pkeyReturner:<state,state> $0))
 :- PP/NP : (lambda $0:e (pkeyReturner:<state,state> $0)) :- PP/NP : (lambda $0:e (lambda $1:state(setReturner:<state,<,state,t>> $1 $0)))
 :- PP/NP : (lambda $0:e (pkeyReturner:<state,state> $0))
 :- PP/NP : (lambda $0:e (pkeyReturner:<state,state> $0)) :- PP/NP : (lambda $0:e (lambda $1:state(setReturner:<state,<,state,t>> $1 $0)))
 :- PP/NP : (lambda $0:e (pkeyReturner:<city,state> $0))
 :- PP/NP : (lambda $0:e (pkeyReturner:<city,state> $0)) :- PP/NP : (lambda $0:e (lambda $1:state(setReturner:<state,<,city,t>> $1 $0)))
 :- PP/NP : (lambda $0:e (pkeyReturner:<city,state> $0))
 :- PP/NP : (lambda $0:e (pkeyReturner:<city,state> $0)) :- PP/NP : (lambda $0:e (lambda $1:state(setReturner:<state,<,city,t>> $1 $0)))
 :- PP/NP : (lambda $0:e (pkeyReturner:<city,state> $0))
 :- PP/NP : (lambda $0:e (pkeyReturner:<city,state> $0)) :- PP/NP : (lambda $0:e (lambda $1:state(setReturner:<state,<,city,t>> $1 $0)))
 :- PP/NP : (lambda $0:e (pkeyReturner:<city,state> $0))
 :- PP/NP : (lambda $0:e (pkeyReturner:<city,state> $0)) :- PP/NP : (lambda $0:e (lambda $1:state(setReturner:<state,<,city,t>> $1 $0)))