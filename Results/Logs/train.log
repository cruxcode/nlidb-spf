[P-T4] [P-T4] ============ (Job train started)
[P-T4] [P-T4] Initializing GENLEX ...
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> bhusawal:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> uttrakhand:s)
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>, #0<<e,t>,e>:<<e,t>,e>]-->NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (#0<<e,t>,e>:<<e,t>,e> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4)))))))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,e>:<<e,t>,e>]-->S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (#0<<e,t>,e>:<<e,t>,e> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> mumbai:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0e:e]-->NP : #0e:e
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> kanpur:c)
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<e,<e,t>>:<e,<e,t>>, #1<e,e>:<e,e>]-->PP/NP : (lambda $0:e (lambda $1:e (#0<e,<e,t>>:<e,<e,t>> (elevation:<lo,i> $1) (#1<e,e>:<e,e> $0))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1)))
[P-T4] [P-T4] Adding new template to generation repository (3 constants, 0 attributes): [#0<e,<e,t>>:<e,<e,t>>, #0<<e,t>,e>:<<e,t>,e>, #0e:e]-->S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (#0<e,<e,t>>:<e,<e,t>> (#0<<e,t>,e>:<<e,t>,e> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) #0e:e))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<t,t>:<t,t>]-->PP/NP : (lambda $0:e (lambda $1:e (#0<t,t>:<t,t> (equals:<e,<e,t>> $1 $0))))
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>, #0<e,e>:<e,e>]-->NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (#0<e,e>:<e,e> $4))))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> haryana:s)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> katni:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> gurgaon:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> mussoorie:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> rajasthan:s)
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1)))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,e>:<<e,t>,e>]-->NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (#0<<e,t>,e>:<<e,t>,e> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4)))))))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> kurukshetra:c)
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>, #0<e,e>:<e,e>]-->NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (#0<e,e>:<e,e> $4))))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0t:t]-->S\NP : (lambda $0:e #0t:t)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,e>:<<e,t>,e>]-->NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (#0<<e,t>,e>:<<e,t>,e> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4)))))))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> ranchi:c)
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>, #0<e,e>:<e,e>]-->NP/N : (lambda $0:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (#0<e,e>:<e,e> $2))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> jodhpur:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>]-->NP/N : (lambda $0:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1)))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> bihar:s)
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<t,t>:<t,t>, #0<e,<e,t>>:<e,<e,t>>]-->PP/NP : (lambda $0:e (lambda $1:e (#0<t,t>:<t,t> (#0<e,<e,t>>:<e,<e,t>> $1 $0))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0e:e]-->NP : (pkey_retriever:<s,s_pkey> #0e:e)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (#0<e,e>:<e,e> $2))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2)))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>]-->NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3)))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0e:e]-->S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) #0e:e))))
[P-T4] [P-T4] Adding new template to generation repository (3 constants, 0 attributes): [#0<e,<e,t>>:<e,<e,t>>, #0<e,e>:<e,e>, #1<e,e>:<e,e>]-->PP/NP : (lambda $0:e (lambda $1:e (#0<e,<e,t>>:<e,<e,t>> (#0<e,e>:<e,e> $1) (#1<e,e>:<e,e> $0))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> patna:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP/NP : (lambda $0:e (#0<e,e>:<e,e> $0))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1)))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1)))
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<e,<e,t>>:<e,<e,t>>, #0<<e,t>,e>:<<e,t>,e>]-->S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (#0<e,<e,t>>:<e,<e,t>> (#0<<e,t>,e>:<<e,t>,e> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> madhya_pradesh:s)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> dehradun:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<t,t>:<t,t>]-->S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (#0<t,t>:<t,t> ($0 $1))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1)))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> khandwa:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> uttar_pradesh:s)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,<e,t>>:<e,<e,t>>]-->PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (#0<e,<e,t>>:<e,<e,t>> $1 $0))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1)))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1)))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (#0<e,e>:<e,e> $2))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (#0<e,e>:<e,e> $4))))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->NP/NP : (lambda $0:e $0)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> nagpur:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>]-->NP/N : (lambda $0:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->S/S : (lambda $0:t $0)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> darbhanga:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,e>:<<e,t>,e>]-->NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (#0<<e,t>,e>:<<e,t>,e> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4)))))))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1)))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,<e,t>>:<e,<e,t>>]-->S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (#0<e,<e,t>>:<e,<e,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>]-->NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3)))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> reewa:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<t,t>:<t,t>]-->N/N : (lambda $0:<e,t> (lambda $1:e (#0<t,t>:<t,t> ($0 $1))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> noida:c)
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<e,<e,t>>:<e,<e,t>>, #0<e,e>:<e,e>]-->PP/NP : (lambda $0:e (lambda $1:e (#0<e,<e,t>>:<e,<e,t>> (#0<e,e>:<e,e> $1) (elevation:<lo,i> $0))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> luckhnow:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,<t,e>>:<e,<t,e>>]-->NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (#0<e,<t,e>>:<e,<t,e>> $1 ($0 $1))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>]-->NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4)))))))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->S/NP : (lambda $0:e $0)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,<e,t>>:<e,<e,t>>]-->S\NP/NP : (lambda $0:e (lambda $1:e (#0<e,<e,t>>:<e,<e,t>> $1 $0)))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,<e,t>>:<e,<e,t>>]-->S\NP/NP : (lambda $0:e (lambda $1:e (#0<e,<e,t>>:<e,<e,t>> $0 $1)))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>]-->NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3)))))
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<e,e>:<e,e>, #0e:e]-->NP : (#0<e,e>:<e,e> #0e:e)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,e>:<<e,t>,e>]-->S/N : (lambda $0:<e,t> (#0<<e,t>,e>:<<e,t>,e> (lambda $1:e ($0 $1))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->S\S : (lambda $0:t $0)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> maharashtra:s)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> bhopal:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> chandigarh:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,e>:<<e,t>,e>]-->NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (#0<<e,t>,e>:<<e,t>,e> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4)))))))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (#0<e,e>:<e,e> $1) (elevation:<lo,i> $0))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> nainital:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#1<e,e>:<e,e>]-->PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (#1<e,e>:<e,e> $0))))
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<e,<e,t>>:<e,<e,t>>, #0e:e]-->S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (#0<e,<e,t>>:<e,<e,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) #0e:e))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->S/NP : (lambda $0:e (#0<e,e>:<e,e> $0))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> deoghar:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>]-->NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4))))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>]-->NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4)))))))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->S\S : (lambda $0:e $0)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> jharkhand:s)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>]-->NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4))))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,e>:<<e,t>,e>]-->S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (#0<<e,t>,e>:<<e,t>,e> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,e>:<<e,t>,e>]-->S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (#0<<e,t>,e>:<<e,t>,e> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))))
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<e,e>:<e,e>, #1<e,e>:<e,e>]-->PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (#0<e,e>:<e,e> $1) (#1<e,e>:<e,e> $0))))
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<<e,t>,e>:<<e,t>,e>, #0e:e]-->S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (#0<<e,t>,e>:<<e,t>,e> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) #0e:e))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<t,t>:<t,t>]-->PP/PP : (lambda $0:<e,t> (lambda $1:e (#0<t,t>:<t,t> ($0 $1))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> jaipur:c)
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))
[P-T4] [P-T4] Adding new template to generation repository (0 constants, 0 attributes): []-->PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1)))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,<t,e>>:<e,<t,e>>]-->NP/PP : (lambda $0:<e,t> (lambda $1:e (#0<e,<t,e>>:<e,<t,e>> $1 ($0 $1))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> jalgaon:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0e:e]-->NP : (pkey_retriever:<c,c_pkey> #0e:e)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> aurangabad:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (#0<e,e>:<e,e> $4))))))
[P-T4] [P-T4] Adding new template to generation repository (2 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>, #0<<e,t>,e>:<<e,t>,e>]-->NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (#0<<e,t>,e>:<<e,t>,e> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4)))))))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> kota:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,e>:<e,e>]-->NP : (#0<e,e>:<e,e> rishikesh:c)
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>>]-->NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (#0<<e,t>,<<e,e>,e>>:<<e,t>,<<e,e>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4))))))
[P-T4] [P-T4] Adding new template to generation repository (1 constants, 0 attributes): [#0<e,<e,t>>:<e,<e,t>>]-->PP/NP : (lambda $0:e (lambda $1:e (#0<e,<e,t>>:<e,<e,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0))))
[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 0
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [0]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.1050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0960sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0080sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.2260sec
[P-T4] [P-T4] 1 : ================== [0]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0110sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0370sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0530sec
[P-T4] [P-T4] 2 : ================== [0]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0060sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0300sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0410sec
[P-T4] [P-T4] 3 : ================== [0]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0420sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0510sec
[P-T4] [P-T4] 4 : ================== [0]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0060sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0380sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0260sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0720sec
[P-T4] [P-T4] 5 : ================== [0]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0190sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0280sec
[P-T4] [P-T4] 6 : ================== [0]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0060sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0420sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0510sec
[P-T4] [P-T4] 7 : ================== [0]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0200sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0280sec
[P-T4] [P-T4] 8 : ================== [0]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0460sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0530sec
[P-T4] [P-T4] System memory: free memory: 112mb	| allocated memory: 155mb	| max memory: 1,799mb	| total free memory: 1,756mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 9 Sample processing, mean: 0.0670sec
Perfromend 9 Model parse, mean: 0.0167sec
Perfromend 9 genlex parse, mean: 0.0411sec
Processed: 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 1
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [1]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0210sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0030sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0290sec
[P-T4] [P-T4] 1 : ================== [1]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0120sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0240sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0400sec
[P-T4] [P-T4] 2 : ================== [1]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0270sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0360sec
[P-T4] [P-T4] 3 : ================== [1]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0080sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0310sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0110sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0530sec
[P-T4] [P-T4] 4 : ================== [1]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0280sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0360sec
[P-T4] [P-T4] 5 : ================== [1]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0320sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0390sec
[P-T4] [P-T4] 6 : ================== [1]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0310sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0410sec
[P-T4] [P-T4] 7 : ================== [1]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0200sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0290sec
[P-T4] [P-T4] 8 : ================== [1]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0170sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0610sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0820sec
[P-T4] [P-T4] System memory: free memory: 116mb	| allocated memory: 155mb	| max memory: 1,799mb	| total free memory: 1,760mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 18 Sample processing, mean: 0.0549sec
Perfromend 18 Model parse, mean: 0.0119sec
Perfromend 18 genlex parse, mean: 0.0358sec
Processed: 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 2
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [2]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0080sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0360sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0490sec
[P-T4] [P-T4] 1 : ================== [2]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0190sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0180sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0390sec
[P-T4] [P-T4] 2 : ================== [2]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0760sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0030sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0870sec
[P-T4] [P-T4] 3 : ================== [2]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0250sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0350sec
[P-T4] [P-T4] 4 : ================== [2]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0490sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0560sec
[P-T4] [P-T4] 5 : ================== [2]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0210sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0260sec
[P-T4] [P-T4] 6 : ================== [2]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0130sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0180sec
[P-T4] [P-T4] 7 : ================== [2]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0450sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0030sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0530sec
[P-T4] [P-T4] 8 : ================== [2]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0200sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0260sec
[P-T4] [P-T4] System memory: free memory: 183mb	| allocated memory: 220mb	| max memory: 1,799mb	| total free memory: 1,762mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 27 Sample processing, mean: 0.0510sec
Perfromend 27 Model parse, mean: 0.0100sec
Perfromend 27 genlex parse, mean: 0.0351sec
Processed: 9, 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 3
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [3]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0200sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0250sec
[P-T4] [P-T4] 1 : ================== [3]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0290sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0200sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0500sec
[P-T4] [P-T4] 2 : ================== [3]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0230sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0290sec
[P-T4] [P-T4] 3 : ================== [3]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0320sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0370sec
[P-T4] [P-T4] 4 : ================== [3]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0060sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0310sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0410sec
[P-T4] [P-T4] 5 : ================== [3]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0190sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0240sec
[P-T4] [P-T4] 6 : ================== [3]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0150sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0210sec
[P-T4] [P-T4] 7 : ================== [3]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0170sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0240sec
[P-T4] [P-T4] 8 : ================== [3]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0190sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0240sec
[P-T4] [P-T4] System memory: free memory: 122mb	| allocated memory: 220mb	| max memory: 1,799mb	| total free memory: 1,701mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 36 Sample processing, mean: 0.0459sec
Perfromend 36 Model parse, mean: 0.0091sec
Perfromend 36 genlex parse, mean: 0.0318sec
Processed: 9, 9, 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 4
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [4]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0180sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0240sec
[P-T4] [P-T4] 1 : ================== [4]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0180sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0250sec
[P-T4] [P-T4] 2 : ================== [4]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0150sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0190sec
[P-T4] [P-T4] 3 : ================== [4]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0170sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0250sec
[P-T4] [P-T4] 4 : ================== [4]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0000sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0240sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0030sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0270sec
[P-T4] [P-T4] 5 : ================== [4]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0300sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0350sec
[P-T4] [P-T4] 6 : ================== [4]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0180sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0230sec
[P-T4] [P-T4] 7 : ================== [4]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0120sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0190sec
[P-T4] [P-T4] 8 : ================== [4]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0110sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0160sec
[P-T4] [P-T4] System memory: free memory: 191mb	| allocated memory: 220mb	| max memory: 1,799mb	| total free memory: 1,770mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 45 Sample processing, mean: 0.0414sec
Perfromend 45 Model parse, mean: 0.0078sec
Perfromend 45 genlex parse, mean: 0.0290sec
Processed: 9, 9, 9, 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 5
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [5]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0330sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0370sec
[P-T4] [P-T4] 1 : ================== [5]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0210sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0270sec
[P-T4] [P-T4] 2 : ================== [5]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0180sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0240sec
[P-T4] [P-T4] 3 : ================== [5]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0110sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0060sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0240sec
[P-T4] [P-T4] 4 : ================== [5]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0140sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0190sec
[P-T4] [P-T4] 5 : ================== [5]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0210sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0250sec
[P-T4] [P-T4] 6 : ================== [5]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0280sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0340sec
[P-T4] [P-T4] 7 : ================== [5]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0140sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0190sec
[P-T4] [P-T4] 8 : ================== [5]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0330sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0410sec
[P-T4] [P-T4] System memory: free memory: 130mb	| allocated memory: 220mb	| max memory: 1,799mb	| total free memory: 1,709mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 54 Sample processing, mean: 0.0392sec
Perfromend 54 Model parse, mean: 0.0069sec
Perfromend 54 genlex parse, mean: 0.0278sec
Processed: 9, 9, 9, 9, 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 6
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [6]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0120sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0160sec
[P-T4] [P-T4] 1 : ================== [6]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0120sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0170sec
[P-T4] [P-T4] 2 : ================== [6]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0190sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0230sec
[P-T4] [P-T4] 3 : ================== [6]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0120sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0180sec
[P-T4] [P-T4] 4 : ================== [6]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0120sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0160sec
[P-T4] [P-T4] 5 : ================== [6]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0120sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0150sec
[P-T4] [P-T4] 6 : ================== [6]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0060sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0290sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0360sec
[P-T4] [P-T4] 7 : ================== [6]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0210sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0270sec
[P-T4] [P-T4] 8 : ================== [6]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0070sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0770sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0870sec
[P-T4] [P-T4] System memory: free memory: 327mb	| allocated memory: 350mb	| max memory: 1,799mb	| total free memory: 1,776mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 63 Sample processing, mean: 0.0376sec
Perfromend 63 Model parse, mean: 0.0064sec
Perfromend 63 genlex parse, mean: 0.0271sec
Processed: 9, 9, 9, 9, 9, 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 7
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [7]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0180sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0250sec
[P-T4] [P-T4] 1 : ================== [7]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0170sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0230sec
[P-T4] [P-T4] 2 : ================== [7]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0170sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0370sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0590sec
[P-T4] [P-T4] 3 : ================== [7]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0390sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0470sec
[P-T4] [P-T4] 4 : ================== [7]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0120sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0180sec
[P-T4] [P-T4] 5 : ================== [7]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0470sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0530sec
[P-T4] [P-T4] 6 : ================== [7]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0140sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0190sec
[P-T4] [P-T4] 7 : ================== [7]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0140sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0200sec
[P-T4] [P-T4] 8 : ================== [7]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0150sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0110sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0280sec
[P-T4] [P-T4] System memory: free memory: 268mb	| allocated memory: 350mb	| max memory: 1,799mb	| total free memory: 1,717mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 72 Sample processing, mean: 0.0370sec
Perfromend 72 Model parse, mean: 0.0061sec
Perfromend 72 genlex parse, mean: 0.0263sec
Processed: 9, 9, 9, 9, 9, 9, 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 8
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [8]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0280sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0350sec
[P-T4] [P-T4] 1 : ================== [8]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0270sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0320sec
[P-T4] [P-T4] 2 : ================== [8]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0200sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0250sec
[P-T4] [P-T4] 3 : ================== [8]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0330sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0380sec
[P-T4] [P-T4] 4 : ================== [8]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0210sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0260sec
[P-T4] [P-T4] 5 : ================== [8]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0060sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0450sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0540sec
[P-T4] [P-T4] 6 : ================== [8]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0180sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0230sec
[P-T4] [P-T4] 7 : ================== [8]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0180sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0220sec
[P-T4] [P-T4] 8 : ================== [8]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0440sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0490sec
[P-T4] [P-T4] System memory: free memory: 206mb	| allocated memory: 350mb	| max memory: 1,799mb	| total free memory: 1,655mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 81 Sample processing, mean: 0.0366sec
Perfromend 81 Model parse, mean: 0.0058sec
Perfromend 81 genlex parse, mean: 0.0265sec
Processed: 9, 9, 9, 9, 9, 9, 9, 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 9
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [9]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0260sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0330sec
[P-T4] [P-T4] 1 : ================== [9]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0260sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0310sec
[P-T4] [P-T4] 2 : ================== [9]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0260sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0320sec
[P-T4] [P-T4] 3 : ================== [9]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0250sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0300sec
[P-T4] [P-T4] 4 : ================== [9]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0280sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0400sec
[P-T4] [P-T4] 5 : ================== [9]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0070sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0300sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0390sec
[P-T4] [P-T4] 6 : ================== [9]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0260sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0320sec
[P-T4] [P-T4] 7 : ================== [9]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0260sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0340sec
[P-T4] [P-T4] 8 : ================== [9]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0240sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0320sec
[P-T4] [P-T4] System memory: free memory: 146mb	| allocated memory: 350mb	| max memory: 1,799mb	| total free memory: 1,595mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 90 Sample processing, mean: 0.0363sec
Perfromend 90 Model parse, mean: 0.0056sec
Perfromend 90 genlex parse, mean: 0.0265sec
Processed: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 10
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [10]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0220sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0290sec
[P-T4] [P-T4] 1 : ================== [10]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0180sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0260sec
[P-T4] [P-T4] 2 : ================== [10]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0220sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0260sec
[P-T4] [P-T4] 3 : ================== [10]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0060sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0260sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0340sec
[P-T4] [P-T4] 4 : ================== [10]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0270sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0040sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0360sec
[P-T4] [P-T4] 5 : ================== [10]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0300sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0050sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0370sec
[P-T4] [P-T4] 6 : ================== [10]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0240sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0300sec
[P-T4] [P-T4] 7 : ================== [10]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0420sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0020sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0490sec
[P-T4] [P-T4] 8 : ================== [10]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0070sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0690sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0780sec
[P-T4] [P-T4] System memory: free memory: 87mb	| allocated memory: 350mb	| max memory: 1,799mb	| total free memory: 1,536mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 99 Sample processing, mean: 0.0365sec
Perfromend 99 Model parse, mean: 0.0055sec
Perfromend 99 genlex parse, mean: 0.0269sec
Processed: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 11
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [11]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0040sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0200sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0300sec
[P-T4] [P-T4] 1 : ================== [11]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0000sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0250sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0300sec
[P-T4] [P-T4] 2 : ================== [11]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0610sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0660sec
[P-T4] [P-T4] 3 : ================== [11]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0230sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0360sec
[P-T4] [P-T4] 4 : ================== [11]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0090sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0670sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0790sec
[P-T4] [P-T4] 5 : ================== [11]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0200sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0260sec
[P-T4] [P-T4] 6 : ================== [11]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0410sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0470sec
[P-T4] [P-T4] 7 : ================== [11]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0060sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0210sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0300sec
[P-T4] [P-T4] 8 : ================== [11]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0310sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0000sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0360sec
[P-T4] [P-T4] System memory: free memory: 287mb	| allocated memory: 351mb	| max memory: 1,799mb	| total free memory: 1,736mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 108 Sample processing, mean: 0.0370sec
Perfromend 108 Model parse, mean: 0.0053sec
Perfromend 108 genlex parse, mean: 0.0275sec
Processed: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] =========================
[P-T4] [P-T4] Training epoch 12
[P-T4] [P-T4] =========================
[P-T4] [P-T4] 0 : ================== [12]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0230sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0300sec
[P-T4] [P-T4] 1 : ================== [12]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0050sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0320sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0390sec
[P-T4] [P-T4] 2 : ================== [12]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0180sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0230sec
[P-T4] [P-T4] 3 : ================== [12]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0220sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0270sec
[P-T4] [P-T4] 4 : ================== [12]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0070sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0270sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0360sec
[P-T4] [P-T4] 5 : ================== [12]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0110sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0150sec
[P-T4] [P-T4] 6 : ================== [12]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0010sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0080sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0110sec
[P-T4] [P-T4] 7 : ================== [12]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0020sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0090sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0130sec
[P-T4] [P-T4] 8 : ================== [12]
[P-T4] [P-T4] Sample type: SingleSentence
[P-T4] [P-T4] which states border rajasthan
(lambda $0:e (state:<b_pkey,<t,s_pkey>> $0 (next_to:<s_pkey,<b_pkey,t>> (pkey_retriever:<s,s_pkey> rajasthan:s) $0)))
[P-T4] [P-T4] Model parsing time: 0.0030sec
[P-T4] [P-T4] Output is approximate
[P-T4] [P-T4] Created 0 model parses for training sample:
[P-T4] [P-T4] Generated lexicon size = 790
[P-T4] [P-T4] Lexicon induction parsing time: 0.0150sec
[P-T4] [P-T4] Output is exact
[P-T4] [P-T4] Created 2 lexicon generation parses for training sample
[P-T4] [P-T4] Removed 2 invalid parses
[P-T4] [P-T4] 0 valid best parses for lexical generation:
[P-T4] [P-T4] Conditioned parsing time: 0.0010sec
[P-T4] [P-T4] No positive update
[P-T4] [P-T4] Total sample handling time: 0.0200sec
[P-T4] [P-T4] System memory: free memory: 229mb	| allocated memory: 351mb	| max memory: 1,799mb	| total free memory: 1,677mb
[P-T4] [P-T4] Epoch stats:
[P-T4] [P-T4] Perfromend 117 Sample processing, mean: 0.0360sec
Perfromend 117 Model parse, mean: 0.0052sec
Perfromend 117 genlex parse, mean: 0.0268sec
Processed: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
Sample statistics (total: 9)
0 :: 
1 :: 
2 :: 
3 :: 
4 :: 
5 :: 
6 :: 
7 :: 
8 :: 

[P-T4] [P-T4] Final model:
Feature sets:
	edu.cornell.cs.nlp.spf.parser.ccg.factoredlex.features.FactoredLexicalFeatureSet@588df31b
	edu.cornell.cs.nlp.spf.parser.ccg.features.lambda.LogicalExpressionCoordinationFeatureSet@33b37288
	edu.cornell.cs.nlp.spf.parser.ccg.features.basic.RuleUsageFeatureSet@77a57272
	edu.cornell.cs.nlp.spf.parser.ccg.features.basic.DynamicWordSkippingFeatures@7181ae3f
Independent Lexical feature sets (subset of all features):
	edu.cornell.cs.nlp.spf.parser.ccg.factoredlex.features.FactoredLexicalFeatureSet@588df31b
Lexicon [size=2830]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
smallest :- NP : (size:<lo,i> rajasthan:s) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
khandwa :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
highest :- NP : (elevation:<lo,i> katni:c) [10.0]
how many :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
smallest :- NP : (size:<lo,i> bhopal:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
are :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
city named mumbai :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
what :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
with the :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
largest :- NP : (size:<lo,i> uttrakhand:s) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> reewa:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
please :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
does :- NP/NP : (lambda $0:e $0) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
please :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
kurukshetra :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
is :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
rishikesh :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
at least one :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [43.483695221017136]
higher than :- NP : (elevation:<lo,i> mussoorie:c) [10.0]
smallest :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [20.0]
how :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
in meters :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
border :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (next_to:<b_pkey,s_pkey> $2)))) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
patna :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
by :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
which :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
biggest :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [20.0]
the :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
mumbai :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [20.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
mussoorie :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
tell me :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
largest :- NP : (size:<lo,i> chandigarh:c) [10.0]
does :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
does :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the most :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
combined :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
bhopal :- NP : bhopal:c [20.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
smallest :- NP : (size:<lo,i> jharkhand:s) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
which :- S/S : (lambda $0:t $0) [10.0]
in meters :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
khandwa :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
does :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
in feet :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
higher than :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
most :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
deoghar :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
lowest :- NP : (elevation:<lo,i> katni:c) [10.0]
what :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deoghar :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [10.0]
not :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [20.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
least :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [10.0]
higher than :- NP : (elevation:<lo,i> dehradun:c) [10.0]
are :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
total :- NP/N : (lambda $0:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
largest :- NP : (size:<lo,i> mumbai:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [20.0]
highest :- NP : (elevation:<lo,i> kanpur:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
largest :- NP : (size:<lo,i> maharashtra:s) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
in feet :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
fewest :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [10.0]
in meters :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
in meters :- S\S : (lambda $0:t $0) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
how many :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
jodhpur :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
smallest :- NP/NP : (lambda $0:e (size:<lo,i> $0)) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [20.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
is :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (equals:<e,<e,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
chandigarh :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) chandigarh:c)))) [10.0]
higher than :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [31.435469250725863]
show :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
dehradun :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
jodhpur :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
with the :- S\S : (lambda $0:e $0) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
bhopal :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
uttrakhand :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
does :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
dehradun :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
kurukshetra :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
number :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
states :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (next_to:<b_pkey,<s_pkey,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
higher than :- NP : (elevation:<lo,i> noida:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
fewest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
fewest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
with :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jaipur :- NP : jaipur:c [20.0]
can you :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
population :- NP : (population:<lo,i> madhya_pradesh:s) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
is :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [31.435469250725863]
border :- NP : (next_to:<b_pkey,s_pkey> bhusawal:c) [10.0]
sparsest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
which :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [31.435469250725863]
katni :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
jodhpur :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
largest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [20.0]
of :- S\S : (lambda $0:t $0) [10.0]
no :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [10.0]
border :- S\NP/NP : (lambda $0:e (lambda $1:e (next_to:<b_pkey,<s_pkey,t>> $1 $0))) [20.0]
border :- S\NP/NP : (lambda $0:e (lambda $1:e (next_to:<b_pkey,<s_pkey,t>> $0 $1))) [20.0]
patna :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
does :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
by :- S\S : (lambda $0:t $0) [10.0]
most :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [20.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [20.0]
patna :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
gurgaon :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> kota:c) [20.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
smallest :- S/NP : (lambda $0:e (size:<lo,i> $0)) [10.0]
the :- NP/NP : (lambda $0:e $0) [20.0]
maharashtra state :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
tell me :- S\S : (lambda $0:e $0) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
jaipur :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
population :- NP : (population:<lo,i> patna:c) [10.0]
the :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
kota :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
can you :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
the least :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [20.0]
largest :- NP : (size:<lo,i> jodhpur:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
mussoorie :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
largest :- NP/NP : (lambda $0:e (size:<lo,i> $0)) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
at least one :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [43.483695221017136]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
highest :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> jaipur:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
lowest :- NP : (elevation:<lo,i> jodhpur:c) [10.0]
luckhnow :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
luckhnow :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
at least one :- S/N : (lambda $0:<e,t> (count:<<e,t>,i> (lambda $1:e ($0 $1)))) [10.0]
mussoorie :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
in feet :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
which :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
how many :- S\S : (lambda $0:e $0) [10.0]
lowest :- NP : (elevation:<lo,i> kanpur:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [10.0]
largest :- NP : (size:<lo,i> bhopal:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> katni:c) [10.0]
madhya pradesh :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) madhya_pradesh:s)))) [10.0]
lowest :- NP : (elevation:<lo,i> haryana:s) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
higher than :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [31.435469250725863]
haryana :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [20.0]
the :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
how :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
how many :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
how many :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [55.9479341998814]
least :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
total :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (sum:<<e,t>,<<e,i>,i>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
lowest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
population :- NP : (population:<lo,i> bhusawal:c) [10.0]
smallest :- NP : (size:<lo,i> ranchi:c) [10.0]
please :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
largest :- NP : (size:<lo,i> haryana:s) [10.0]
at least one :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
aurangabad :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
rishikesh :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
least :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
uttrakhand :- NP : uttrakhand:s [20.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
which :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
highest :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
in meters :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
most :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
mussoorie :- NP : mussoorie:c [20.0]
patna :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
the aurangabad :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
bhusawal :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
patna :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
city named mumbai :- NP : mumbai:c [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
maharashtra :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) maharashtra:s)))) [10.0]
how :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
maharashtra :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
bhopal :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) bhopal:c)))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
population :- NP : (population:<lo,i> reewa:c) [10.0]
mumbai :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
the :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
gurgaon :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
least :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> patna:c) [20.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
how many :- S/N : (lambda $0:<e,t> (count:<<e,t>,i> (lambda $1:e ($0 $1)))) [10.0]
the most :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> katni:c) [20.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
are :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
of :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
what :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
can you :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
smallest :- NP : (size:<lo,i> bihar:s) [10.0]
gurgaon :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) gurgaon:c)))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
excluding :- PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> patna:c) [20.0]
show :- S\S : (lambda $0:t $0) [10.0]
the state of haryana :- NP : haryana:s [55.9479341998814]
katni :- NP : (pkey_retriever:<c,c_pkey> katni:c) [20.0]
nagpur :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
noida :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
which :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
do not :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [31.435469250725863]
jodhpur :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
largest :- NP : (size:<lo,i> jharkhand:s) [10.0]
patna :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
maharashtra state :- NP : maharashtra:s [31.435469250725863]
nainital :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
is :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deoghar :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) deoghar:c)))) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
of :- S/S : (lambda $0:t $0) [10.0]
by :- S/S : (lambda $0:t $0) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
bhopal :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
most :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
jalgaon :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
population :- NP : (population:<lo,i> jaipur:c) [10.0]
the :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [20.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [10.0]
how many :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
which :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [20.0]
lowest :- NP : (elevation:<lo,i> maharashtra:s) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
excluding :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
city named mumbai :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
lowest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (elevation:<lo,i> $4)))))) [10.0]
fewest :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
smallest :- NP : (size:<lo,i> nainital:c) [10.0]
largest :- NP : (size:<lo,i> ranchi:c) [10.0]
how :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
deoghar :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
border :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (next_to:<b_pkey,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> haryana:s) [10.0]
the :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
uttar pradesh :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
higher than :- NP : (elevation:<lo,i> nagpur:c) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
are :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
what :- S\S : (lambda $0:t $0) [10.0]
at least one :- NP : 0:i [10.0]
largest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
aurangabad :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) aurangabad:c)))) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> noida:c) [20.0]
katni :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
darbhanga :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
highest :- NP : (elevation:<lo,i> bhusawal:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
kota :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
gurgaon :- NP : gurgaon:c [20.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
the least :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
uttar pradesh :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
chandigarh :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
rishikesh :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
nainital :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
jaipur :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
higher than :- NP : (elevation:<lo,i> kota:c) [10.0]
that :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
the :- S/S : (lambda $0:t $0) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [20.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
maharashtra :- S/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [20.0]
tell me :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
highest :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
noida :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
lowest :- NP : (elevation:<lo,i> uttrakhand:s) [10.0]
the state of haryana :- NP/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
lowest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (elevation:<lo,i> $4)))))) [10.0]
lowest :- NP : (elevation:<lo,i> chandigarh:c) [10.0]
lowest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [20.0]
jharkhand :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) jharkhand:s)))) [10.0]
combined :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (sum:<<e,t>,<<e,i>,i>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
please :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
most :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
in feet :- S/S : (lambda $0:t $0) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
biggest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
darbhanga :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> aurangabad:c) [10.0]
largest :- NP : (size:<lo,i> rajasthan:s) [10.0]
excluding :- PP/NP : (lambda $0:e (lambda $1:e (equals:<e,<e,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
which :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
biggest :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
is :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [20.0]
does :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
largest :- NP : (size:<lo,i> katni:c) [10.0]
how :- S/S : (lambda $0:t $0) [10.0]
ranchi :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
please :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
nagpur :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
higher than :- NP : (elevation:<lo,i> gurgaon:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
patna :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) patna:c)))) [10.0]
lowest :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
lowest :- NP : (elevation:<lo,i> aurangabad:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
what :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the least :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> patna:c) [10.0]
does :- S/NP : (lambda $0:e $0) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
kanpur :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [20.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
how :- NP/NP : (lambda $0:e $0) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
can you :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the maharashtra :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<s,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
not :- N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [20.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [31.435469250725863]
khandwa :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [10.0]
largest :- S/NP : (lambda $0:e (size:<lo,i> $0)) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
how :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
show :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
by :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
number :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
smallest :- NP : (size:<lo,i> chandigarh:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
in feet :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
how :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
nainital :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) nainital:c)))) [10.0]
the most :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
of :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
smallest :- NP : (size:<lo,i> jodhpur:c) [10.0]
how :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
least :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
at least one :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
population :- NP : (population:<lo,i> katni:c) [10.0]
the most :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
the least :- S/N : (lambda $0:<e,t> (count:<<e,t>,i> (lambda $1:e ($0 $1)))) [10.0]
excluding :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (equals:<e,<e,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
highest :- NP : (elevation:<lo,i> haryana:s) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
by :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
population :- NP/NP : (lambda $0:e (population:<lo,i> $0)) [10.0]
states :- S\NP/NP : (lambda $0:e (lambda $1:e (next_to:<b_pkey,<s_pkey,t>> $1 $0))) [20.0]
states :- S\NP/NP : (lambda $0:e (lambda $1:e (next_to:<b_pkey,<s_pkey,t>> $0 $1))) [10.0]
rishikesh :- NP : rishikesh:c [20.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
kanpur :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
in feet :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [20.0]
which :- S\S : (lambda $0:t $0) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
fewest :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
uttrakhand :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
jharkhand :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
smallest :- NP : (size:<lo,i> khandwa:c) [10.0]
jharkhand :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<s,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
please :- S/S : (lambda $0:t $0) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
aurangabad :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
total :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
largest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [20.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
does :- S/S : (lambda $0:t $0) [10.0]
of :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
highest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (elevation:<lo,i> $4)))))) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
maharashtra state :- S/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
reewa :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
lowest :- NP : (elevation:<lo,i> rishikesh:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
highest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [20.0]
that :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
in meters :- S/S : (lambda $0:t $0) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
city named mumbai :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
reewa :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
is :- S/S : (lambda $0:t $0) [20.0]
how :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [20.0]
chandigarh :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
is :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
smallest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [20.0]
uttrakhand :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
sparsest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
the :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
in feet :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [20.0]
maharashtra state :- NP/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
what :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [20.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
border :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (next_to:<b_pkey,<s_pkey,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
is :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
higher than :- NP : (elevation:<lo,i> uttar_pradesh:s) [10.0]
chandigarh :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
the :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
luckhnow :- NP : luckhnow:c [20.0]
lowest :- NP : (elevation:<lo,i> jaipur:c) [10.0]
please :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
nainital :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
are :- S/S : (lambda $0:t $0) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
rishikesh :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
the :- S/NP : (lambda $0:e $0) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
maharashtra state :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
of :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
a :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
border :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (next_to:<b_pkey,s_pkey> $4)))))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
most :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
madhya pradesh :- NP : madhya_pradesh:s [31.435469250725863]
khandwa :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
madhya pradesh :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
by :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
are :- NP/NP : (lambda $0:e $0) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
in meters :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [20.0]
are :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
how many :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [20.0]
bhusawal :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
with the :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
lowest :- NP : (elevation:<lo,i> reewa:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
are :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [10.0]
show :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
are :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
least :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
katni :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
darbhanga :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
higher than :- NP : (elevation:<lo,i> bihar:s) [10.0]
have :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
fewest :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
madhya pradesh :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
how :- S/NP : (lambda $0:e $0) [20.0]
most :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [20.0]
population :- NP : (population:<lo,i> haryana:s) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
chandigarh :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [20.0]
a :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
does :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
rishikesh :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
lowest :- NP : (elevation:<lo,i> kurukshetra:c) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
the state of haryana :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
largest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
population :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (population:<lo,i> $2)))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
least :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
biggest :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
in meters :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the most :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
combined :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
uttar pradesh :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [20.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [20.0]
population :- NP : (population:<lo,i> jodhpur:c) [10.0]
ranchi :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) ranchi:c)))) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [20.0]
jharkhand :- NP/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
luckhnow :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
largest :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
fewest :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
lowest :- NP : (elevation:<lo,i> patna:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
the maharashtra :- NP/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
nagpur :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
fewest :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
a :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> mumbai:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
lowest :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
does :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
mussoorie :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
lowest :- NP : (elevation:<lo,i> bhopal:c) [10.0]
noida :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
highest :- NP : (elevation:<lo,i> jharkhand:s) [10.0]
border :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (next_to:<b_pkey,s_pkey> $4)))))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
kanpur :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
have :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
does :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
does :- S\S : (lambda $0:t $0) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> nagpur:c) [10.0]
largest :- NP : (size:<lo,i> reewa:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [20.0]
border :- NP : (next_to:<b_pkey,s_pkey> uttrakhand:s) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
maharashtra state :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [10.0]
patna :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
tell me :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
the aurangabad :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
which :- S/NP : (lambda $0:e $0) [20.0]
jodhpur :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) jodhpur:c)))) [10.0]
the most :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
that :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
largest :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
smallest :- NP : (size:<lo,i> noida:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
highest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
how many :- NP/NP : (lambda $0:e $0) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
reewa :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
with :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
largest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
haryana :- NP : haryana:s [20.0]
katni :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
dehradun :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
the state of haryana :- S/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
smallest :- NP : (size:<lo,i> mussoorie:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
most :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
in meters :- NP/NP : (lambda $0:e $0) [10.0]
kanpur :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [31.435469250725863]
have :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [20.0]
nainital :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
what :- S/NP : (lambda $0:e $0) [20.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
mumbai :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
aurangabad :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
higher than :- NP : (elevation:<lo,i> patna:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> rishikesh:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
most :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
jalgaon :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
with :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
smallest :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
highest :- NP : (elevation:<lo,i> bhopal:c) [10.0]
of :- S/NP : (lambda $0:e $0) [10.0]
have :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the aurangabad :- NP : aurangabad:c [31.435469250725863]
bihar :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
the most :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [10.0]
bhusawal :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
haryana :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
kota :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
by :- S/NP : (lambda $0:e $0) [10.0]
in meters :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
noida :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
largest :- NP : (size:<lo,i> kanpur:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
lowest :- NP : (elevation:<lo,i> madhya_pradesh:s) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
deoghar :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
highest :- NP : (elevation:<lo,i> rishikesh:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
highest :- NP : (elevation:<lo,i> madhya_pradesh:s) [10.0]
jaipur :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
kurukshetra :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
states :- PP/NP : (lambda $0:e (lambda $1:e (next_to:<b_pkey,<s_pkey,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
the most :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> maharashtra:s) [10.0]
mumbai :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
can you :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [31.435469250725863]
lowest :- NP : (elevation:<lo,i> mumbai:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
smallest :- NP : (size:<lo,i> kota:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [20.0]
the :- S\S : (lambda $0:t $0) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
of :- NP/NP : (lambda $0:e $0) [20.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [10.0]
in meters :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
by :- NP/NP : (lambda $0:e $0) [10.0]
that :- S\S : (lambda $0:t $0) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [31.435469250725863]
nainital :- NP : nainital:c [20.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [20.0]
noida :- NP : noida:c [20.0]
kota :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
the :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
luckhnow :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
luckhnow :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
the maharashtra :- NP : maharashtra:s [31.435469250725863]
by :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
rajasthan :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
the least :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
noida :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [20.0]
higher than :- NP : (elevation:<lo,i> bhopal:c) [10.0]
of :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
highest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
not :- PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [20.0]
madhya pradesh :- S/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
the state of haryana :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
the state of haryana :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
mussoorie :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> kurukshetra:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
biggest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
show :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
largest :- NP : (size:<lo,i> dehradun:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
smallest :- NP : (size:<lo,i> kurukshetra:c) [10.0]
population :- NP : (population:<lo,i> uttar_pradesh:s) [10.0]
jaipur :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) jaipur:c)))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
higher than :- NP : (elevation:<lo,i> mumbai:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
higher than :- NP : (elevation:<lo,i> madhya_pradesh:s) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
jaipur :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
jalgaon :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) jalgaon:c)))) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
nagpur :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
at least one :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [43.483695221017136]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
that :- S\S : (lambda $0:e $0) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
mussoorie :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) mussoorie:c)))) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
can you :- NP/NP : (lambda $0:e $0) [10.0]
tell me :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
highest :- NP : (elevation:<lo,i> jalgaon:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
maharashtra :- NP : maharashtra:s [20.0]
lowest :- NP : (elevation:<lo,i> nainital:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> bihar:s) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
the maharashtra :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
in meters :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
mumbai :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
with the :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
the aurangabad :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) aurangabad:c)))) [10.0]
total :- NP/N : (lambda $0:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
show :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
uttrakhand :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) uttrakhand:s)))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
highest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [20.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
bihar :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
smallest :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (size:<lo,i> $0)))) [10.0]
excluding :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [20.0]
are :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
what :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
higher than :- NP : (elevation:<lo,i> nainital:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
maharashtra state :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) maharashtra:s)))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
bhopal :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
jharkhand :- S/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
have :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
at least one :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (>:<i,<i,t>> $1 $0)))) [10.0]
how :- S\S : (lambda $0:t $0) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
aurangabad :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
tell me :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
the most :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
dehradun :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
what :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [20.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
can you :- S/NP : (lambda $0:e $0) [10.0]
the maharashtra :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
maharashtra :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<s,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
smallest :- NP : (size:<lo,i> jalgaon:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
kanpur :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
in meters :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
maharashtra :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
most :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
largest :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [20.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
what :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
are :- S\S : (lambda $0:t $0) [10.0]
chandigarh :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
highest :- NP : (elevation:<lo,i> maharashtra:s) [10.0]
jalgaon :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
luckhnow :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) luckhnow:c)))) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
gurgaon :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
noida :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) noida:c)))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
have :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
khandwa :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [10.0]
that :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
smallest :- NP : (size:<lo,i> maharashtra:s) [10.0]
ranchi :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
smallest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [20.0]
jalgaon :- NP : jalgaon:c [20.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [20.0]
border :- NP : (next_to:<b_pkey,s_pkey> madhya_pradesh:s) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [10.0]
jaipur :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
maharashtra state :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
maharashtra state :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<s,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
does :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
tell me :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
sparsest :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
highest :- NP : (elevation:<lo,i> nainital:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
kanpur :- NP : kanpur:c [20.0]
how :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
population :- NP : (population:<lo,i> luckhnow:c) [10.0]
city named mumbai :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
fewest :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
madhya pradesh :- NP/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
the maharashtra :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
of :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
highest :- NP : (elevation:<lo,i> nagpur:c) [10.0]
highest :- NP : (elevation:<lo,i> aurangabad:c) [10.0]
madhya pradesh :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
total :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
the most :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
highest :- NP : (elevation:<lo,i> jaipur:c) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
lowest :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [20.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
by :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
highest :- NP : (elevation:<lo,i> uttrakhand:s) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
with the :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> noida:c) [20.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [10.0]
population :- NP : (population:<lo,i> khandwa:c) [10.0]
a :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
a :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
with :- S\S : (lambda $0:e $0) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [20.0]
city named mumbai :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) mumbai:c)))) [10.0]
luckhnow :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
haryana :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
smallest :- NP : (size:<lo,i> aurangabad:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [10.0]
highest :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
is :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
highest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (elevation:<lo,i> $4)))))) [10.0]
lowest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
jharkhand :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
no :- N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [10.0]
which :- NP/NP : (lambda $0:e $0) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
a :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
please :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
that :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
how many :- S/NP : (lambda $0:e $0) [31.435469250725863]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
at least one :- NP : (pkey_retriever:<c,c_pkey> 0:i) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
khandwa :- NP : khandwa:c [20.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
smallest :- NP : (size:<lo,i> nagpur:c) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [10.0]
smallest :- NP : (size:<lo,i> jaipur:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
with the :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
smallest :- NP : (size:<lo,i> haryana:s) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
haryana :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) haryana:s)))) [10.0]
smallest :- NP : (size:<lo,i> uttrakhand:s) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
highest :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [20.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
by :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> bhopal:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
of :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
darbhanga :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
rishikesh :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
city named mumbai :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [20.0]
with :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [20.0]
have :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
uttar pradesh :- NP/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
least :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
smallest :- NP : (size:<lo,i> rishikesh:c) [10.0]
the most :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [20.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
border :- PP/NP : (lambda $0:e (lambda $1:e (next_to:<s_pkey,<b_pkey,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
which :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
haryana :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
combined :- NP/N : (lambda $0:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
kota :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
uttar pradesh :- S/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
kanpur :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) kanpur:c)))) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
haryana :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<s,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
bhusawal :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
reewa :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
have :- S/S : (lambda $0:t $0) [10.0]
least :- S/N : (lambda $0:<e,t> (count:<<e,t>,i> (lambda $1:e ($0 $1)))) [10.0]
bhusawal :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
the :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
with the :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
higher than :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [31.435469250725863]
kota :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
the least :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
bihar :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<s,s_pkey> $0)))) [10.0]
population :- NP : (population:<lo,i> deoghar:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [20.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
chandigarh :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
are :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
highest :- NP : (elevation:<lo,i> kurukshetra:c) [10.0]
smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
largest :- NP : (size:<lo,i> uttar_pradesh:s) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
biggest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
bhusawal :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
kanpur :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
which :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
smallest :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
the state of haryana :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<s,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
the :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [20.0]
smallest :- NP : (size:<lo,i> gurgaon:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
how :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
what :- S/S : (lambda $0:t $0) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
haryana :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
have :- S/NP : (lambda $0:e $0) [10.0]
lowest :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
bhusawal :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
how many :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [20.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
higher than :- NP : (elevation:<lo,i> katni:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
that :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
combined :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (sum:<<e,t>,<<e,i>,i>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [20.0]
total :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
have :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
what :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
least :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
what :- NP/NP : (lambda $0:e $0) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
uttar pradesh :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
excluding :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [20.0]
highest :- NP : (elevation:<lo,i> bihar:s) [10.0]
the state of haryana :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
population :- NP : (population:<lo,i> dehradun:c) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
rajasthan :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<s,s_pkey> $0)))) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
excluding :- N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
nagpur :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [31.435469250725863]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
nainital :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
the most :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
highest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
rishikesh :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
largest :- NP : (size:<lo,i> patna:c) [10.0]
with :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
the state of haryana :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) haryana:s)))) [10.0]
darbhanga :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
rajasthan :- NP : rajasthan:s [20.0]
the maharashtra :- S/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
population :- NP : (population:<lo,i> darbhanga:c) [10.0]
can you :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [20.0]
highest :- NP : (elevation:<lo,i> kota:c) [10.0]
with the :- S\S : (lambda $0:t $0) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
population :- NP : (population:<lo,i> kanpur:c) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
a :- S\S : (lambda $0:e $0) [10.0]
kota :- NP : kota:c [20.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
jalgaon :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
what :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
population :- NP : (population:<lo,i> chandigarh:c) [10.0]
smallest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
mumbai :- NP : mumbai:c [20.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [20.0]
border :- NP : (next_to:<b_pkey,s_pkey> nainital:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
nagpur :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) nagpur:c)))) [10.0]
kota :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) kota:c)))) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
how many :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [20.0]
the most :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
sparsest :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
reewa :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
how many :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
smallest :- NP : (size:<lo,i> luckhnow:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
nagpur :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
number :- S/N : (lambda $0:<e,t> (count:<<e,t>,i> (lambda $1:e ($0 $1)))) [20.0]
mussoorie :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
show :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
at least one :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
lowest :- NP : (elevation:<lo,i> dehradun:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
jalgaon :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
that :- S/NP : (lambda $0:e $0) [10.0]
largest :- NP : (size:<lo,i> nagpur:c) [10.0]
no :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [20.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [10.0]
darbhanga :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
please :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
chandigarh :- NP : chandigarh:c [20.0]
noida :- NP : (pkey_retriever:<c,c_pkey> noida:c) [20.0]
highest :- NP : (elevation:<lo,i> dehradun:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
kota :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
sparsest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
the maharashtra :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) maharashtra:s)))) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
is :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [20.0]
the most :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
lowest :- NP : (elevation:<lo,i> uttar_pradesh:s) [10.0]
lowest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
least :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
patna :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> kota:c) [10.0]
highest :- NP : (elevation:<lo,i> noida:c) [10.0]
madhya pradesh :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [43.483695221017136]
do not :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
lowest :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
biggest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
ranchi :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> khandwa:c) [10.0]
in meters :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
biggest :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
mumbai :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) mumbai:c)))) [10.0]
a :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
khandwa :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) khandwa:c)))) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
by :- S\S : (lambda $0:e $0) [10.0]
fewest :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [20.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [20.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
nainital :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
of :- S\S : (lambda $0:e $0) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
higher than :- NP : (elevation:<lo,i> haryana:s) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [31.435469250725863]
khandwa :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
population :- NP : (population:<lo,i> nainital:c) [10.0]
largest :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [20.0]
darbhanga :- NP : darbhanga:c [20.0]
bhopal :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
in feet :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
ranchi :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
what :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
population :- NP : (population:<lo,i> jalgaon:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
states :- NP/PP : (lambda $0:<e,t> (lambda $1:e (next_to:<b_pkey,<t,s_pkey>> $1 ($0 $1)))) [20.0]
katni :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
with :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
are :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
total :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (sum:<<e,t>,<<e,i>,i>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
lowest :- NP : (elevation:<lo,i> mussoorie:c) [10.0]
not :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
population :- NP : (population:<lo,i> bihar:s) [10.0]
have :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [10.0]
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [20.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
highest :- NP : (elevation:<lo,i> mussoorie:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
have :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
of :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
tell me :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [31.435469250725863]
higher than :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [31.435469250725863]
by :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
by :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
rishikesh :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
jaipur :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
please :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
can you :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [20.0]
smallest :- NP : (size:<lo,i> patna:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
with :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
with the :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [20.0]
border :- NP : (next_to:<b_pkey,s_pkey> gurgaon:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [10.0]
how many :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [31.435469250725863]
dehradun :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [10.0]
lowest :- NP : (elevation:<lo,i> noida:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
highest :- NP : (elevation:<lo,i> uttar_pradesh:s) [10.0]
highest :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
luckhnow :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
have :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
have :- NP/NP : (lambda $0:e $0) [10.0]
jharkhand :- NP : jharkhand:s [20.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [20.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
border :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (next_to:<b_pkey,s_pkey> $0)))) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
kurukshetra :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
rajasthan :- NP/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
in feet :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
higher than :- NP : (elevation:<lo,i> kanpur:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> uttar_pradesh:s) [10.0]
highest :- NP : (elevation:<lo,i> khandwa:c) [10.0]
jharkhand :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
jalgaon :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
lowest :- NP : (elevation:<lo,i> gurgaon:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [31.435469250725863]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
population :- NP : (population:<lo,i> ranchi:c) [10.0]
with :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [20.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
higher than :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [31.435469250725863]
ranchi :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
tell me :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
reewa :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
the maharashtra :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
lowest :- NP : (elevation:<lo,i> khandwa:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [20.0]
that :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the least :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
kota :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
combined :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [10.0]
lowest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [20.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
how many :- S/S : (lambda $0:t $0) [10.0]
highest :- NP : (elevation:<lo,i> gurgaon:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
is :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
in feet :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
higher than :- S\NP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> $1 $0))) [10.0]
higher than :- S\NP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> $0 $1))) [10.0]
the least :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [10.0]
nagpur :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
lowest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [20.0]
jodhpur :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
a :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
higher than :- NP : (elevation:<lo,i> jodhpur:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [31.435469250725863]
combined :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
of :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
have :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
ranchi :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
nagpur :- NP : nagpur:c [20.0]
most :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [10.0]
rajasthan :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
fewest :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
tell me :- S/S : (lambda $0:t $0) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [10.0]
rajasthan :- S/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [20.0]
kurukshetra :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) kurukshetra:c)))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [20.0]
uttrakhand :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<s,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
kurukshetra :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [20.0]
patna :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
number :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [43.483695221017136]
noida :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
smallest :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [20.0]
patna :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
noida :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
largest :- NP : (size:<lo,i> darbhanga:c) [10.0]
bhopal :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
mussoorie :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
population :- NP : (population:<lo,i> rajasthan:s) [10.0]
mussoorie :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
how many :- S\S : (lambda $0:t $0) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
noida :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
can you :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
of :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [20.0]
the least :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
uttrakhand :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [20.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
kurukshetra :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
can you :- S/S : (lambda $0:t $0) [10.0]
largest :- NP : (size:<lo,i> luckhnow:c) [10.0]
jaipur :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
show :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
is :- S\NP/NP : (lambda $0:e (lambda $1:e (equals:<e,<e,t>> $1 $0))) [20.0]
is :- S\NP/NP : (lambda $0:e (lambda $1:e (equals:<e,<e,t>> $0 $1))) [10.0]
do not :- N/N : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
bihar :- NP : bihar:s [20.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
in feet :- S/NP : (lambda $0:e $0) [10.0]
can you :- S\S : (lambda $0:t $0) [10.0]
the most :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [20.0]
haryana :- S/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
higher than :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [31.435469250725863]
aurangabad :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
how many :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
biggest :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [20.0]
with the :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [20.0]
jaipur :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
the most :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [20.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
nagpur :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
bhopal :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
by :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
the most :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
fewest :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [10.0]
a :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bihar :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
with the :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [31.435469250725863]
mussoorie :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
have :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
bihar :- S/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
highest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [20.0]
show :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
bhopal :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
is :- S/NP : (lambda $0:e $0) [10.0]
a :- S\S : (lambda $0:t $0) [10.0]
in meters :- S/NP : (lambda $0:e $0) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
katni :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
the least :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
higher than :- NP : (elevation:<lo,i> uttrakhand:s) [10.0]
kurukshetra :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [20.0]
smallest :- NP : (size:<lo,i> bhusawal:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
are :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [20.0]
with the :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the :- S\S : (lambda $0:e $0) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
please :- S/NP : (lambda $0:e $0) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
the least :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
reewa :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
states :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (next_to:<b_pkey,<s_pkey,t>> $1 $0)))) [10.0]
border :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (next_to:<b_pkey,s_pkey> $2)))) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [10.0]
tell me :- S\S : (lambda $0:t $0) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
border :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (next_to:<b_pkey,<s_pkey,t>> $1 $0)))) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
total :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
tell me :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
least :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
population :- NP : (population:<lo,i> gurgaon:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
does :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
uttar pradesh :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<s,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
higher than :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (elevation:<lo,i> $4)))))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
lowest :- NP : (elevation:<lo,i> jalgaon:c) [10.0]
higher than :- NP : (elevation:<lo,i> chandigarh:c) [10.0]
that :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
largest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [20.0]
higher than :- NP : (elevation:<lo,i> reewa:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
bihar :- NP/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
fewest :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
in feet :- S\S : (lambda $0:e $0) [31.435469250725863]
tell me :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
haryana :- NP/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
jaipur :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
luckhnow :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
rajasthan :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
bhusawal :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
higher than :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
least :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [20.0]
tell me :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
chandigarh :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
patna :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [10.0]
gurgaon :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [20.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [20.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
how :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
a :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
nagpur :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
that :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
kanpur :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
lowest :- NP : (elevation:<lo,i> nagpur:c) [10.0]
noida :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
that :- NP/NP : (lambda $0:e $0) [10.0]
bhusawal :- NP : bhusawal:c [20.0]
noida :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
largest :- NP : (size:<lo,i> madhya_pradesh:s) [10.0]
is :- S\S : (lambda $0:e $0) [10.0]
dehradun :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
least :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [20.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
most :- S/N : (lambda $0:<e,t> (count:<<e,t>,i> (lambda $1:e ($0 $1)))) [10.0]
higher than :- NP : (elevation:<lo,i> rishikesh:c) [10.0]
madhya pradesh :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<s,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
smallest :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
border :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (next_to:<s_pkey,<b_pkey,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
deoghar :- NP : deoghar:c [20.0]
fewest :- S/N : (lambda $0:<e,t> (count:<<e,t>,i> (lambda $1:e ($0 $1)))) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
show :- S\S : (lambda $0:e $0) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> mussoorie:c) [10.0]
lowest :- NP : (elevation:<lo,i> kota:c) [10.0]
please :- S\S : (lambda $0:e $0) [20.0]
how many :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [31.435469250725863]
noida :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
biggest :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
deoghar :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
with the :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
at least one :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
darbhanga :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
border :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (next_to:<s_pkey,<b_pkey,t>> $1 $0)))) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
rajasthan :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) rajasthan:s)))) [10.0]
maharashtra :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
nainital :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> noida:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> jharkhand:s) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
can you :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
how many :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
largest :- NP : (size:<lo,i> deoghar:c) [10.0]
how many :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
tell me :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [20.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
aurangabad :- NP : aurangabad:c [20.0]
nainital :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
katni :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
higher than :- NP : (elevation:<lo,i> aurangabad:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
maharashtra :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [10.0]
jalgaon :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
jharkhand :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<s,s_pkey> $0)))) [10.0]
population :- NP : (population:<lo,i> mussoorie:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
higher than :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (>:<i,<i,t>> $1 $0)))) [10.0]
combined :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
chandigarh :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
smallest :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
the least :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
higher than :- NP : (elevation:<lo,i> jaipur:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
katni :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
jharkhand :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
that :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
how :- S\S : (lambda $0:e $0) [10.0]
kanpur :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
border :- PP/NP : (lambda $0:e (lambda $1:e (next_to:<b_pkey,<s_pkey,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
the maharashtra :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
smallest :- NP : (size:<lo,i> darbhanga:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
combined :- NP/N : (lambda $0:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
show :- S/NP : (lambda $0:e $0) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
darbhanga :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
tell me :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
reewa :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
number :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
khandwa :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [10.0]
does :- S\S : (lambda $0:e $0) [10.0]
most :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [20.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [20.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [20.0]
in meters :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
uttrakhand :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<s,s_pkey> $0)))) [10.0]
are :- S\S : (lambda $0:e $0) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> jalgaon:c) [10.0]
in feet :- NP/NP : (lambda $0:e $0) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
in feet :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
population :- S/NP : (lambda $0:e (population:<lo,i> $0)) [20.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
smallest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [20.0]
katni :- NP : (pkey_retriever:<c,c_pkey> katni:c) [20.0]
the :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
population :- NP : (population:<lo,i> jharkhand:s) [10.0]
largest :- NP : (size:<lo,i> khandwa:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
nainital :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
most :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
with the :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
population :- NP : (population:<lo,i> noida:c) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
kota :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
nainital :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
with the :- NP/NP : (lambda $0:e $0) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [10.0]
with the :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
with :- S\S : (lambda $0:t $0) [10.0]
sparsest :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
in meters :- S\S : (lambda $0:e $0) [31.435469250725863]
patna :- NP : (pkey_retriever:<c,c_pkey> patna:c) [20.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
madhya pradesh :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<s,s_pkey> $0)))) [10.0]
with :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
smallest :- NP : (size:<lo,i> deoghar:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
at least one :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [43.483695221017136]
highest :- NP : (elevation:<lo,i> ranchi:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
largest :- NP : (size:<lo,i> bhusawal:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
population :- NP : (population:<lo,i> mumbai:c) [10.0]
which :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
with the :- S/S : (lambda $0:t $0) [10.0]
largest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
kota :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
lowest :- NP : (elevation:<lo,i> bihar:s) [10.0]
higher than :- NP : (elevation:<lo,i> maharashtra:s) [10.0]
kota :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
dehradun :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) dehradun:c)))) [10.0]
can you :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
have :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
please :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
please :- NP/NP : (lambda $0:e $0) [10.0]
smallest :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (size:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [10.0]
with the :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
kurukshetra :- NP : kurukshetra:c [20.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
population :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (population:<lo,i> $0)))) [10.0]
show :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [10.0]
is :- NP/NP : (lambda $0:e $0) [20.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
population :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (population:<lo,i> $2)))) [10.0]
is :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
higher than :- NP : (elevation:<lo,i> kurukshetra:c) [10.0]
which :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
are :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [20.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [20.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
how :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
deoghar :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [10.0]
highest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (elevation:<lo,i> $4)))))) [10.0]
least :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
smallest :- NP : (size:<lo,i> madhya_pradesh:s) [10.0]
rishikesh :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
smallest :- NP : (size:<lo,i> uttar_pradesh:s) [10.0]
in meters :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
population :- NP : (population:<lo,i> kurukshetra:c) [10.0]
states :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (next_to:<b_pkey,<t,s_pkey>> $1 ($0 $1)))) [20.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
are :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
what :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
please :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
mumbai :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
smallest :- NP : (size:<lo,i> dehradun:c) [10.0]
please :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
highest :- NP : (elevation:<lo,i> rajasthan:s) [10.0]
in feet :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
show :- S/S : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
least :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
how many :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
population :- NP : (population:<lo,i> aurangabad:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
how many :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
highest :- NP : (elevation:<lo,i> luckhnow:c) [10.0]
higher than :- NP : (elevation:<lo,i> ranchi:c) [10.0]
sparsest :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
katni :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) katni:c)))) [10.0]
highest :- NP : (elevation:<lo,i> patna:c) [10.0]
patna :- NP : patna:c [20.0]
jharkhand :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
ranchi :- NP : ranchi:c [20.0]
at least one :- S\NP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> $1 $0))) [10.0]
at least one :- S\NP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> $0 $1))) [10.0]
how :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
is :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
is :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
khandwa :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
border :- NP/NP : (lambda $0:e (next_to:<b_pkey,s_pkey> $0)) [20.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
can you :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
least :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
katni :- NP : katni:c [20.0]
katni :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
at least one :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
reewa :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
largest :- NP : (size:<lo,i> kota:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [20.0]
at least one :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [43.483695221017136]
how many :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
ranchi :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [20.0]
number :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
does :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
do not :- PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
highest :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> darbhanga:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
the aurangabad :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
rishikesh :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) rishikesh:c)))) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
khandwa :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
does :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
fewest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
bihar :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
least :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
deoghar :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
in feet :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jodhpur :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [20.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
lowest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (elevation:<lo,i> $4)))))) [10.0]
does :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [10.0]
dehradun :- NP : dehradun:c [20.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
tell me :- S/NP : (lambda $0:e $0) [10.0]
highest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (elevation:<lo,i> $4)))))) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> chandigarh:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
in meters :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [20.0]
higher than :- NP : (elevation:<lo,i> luckhnow:c) [10.0]
show :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [20.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
smallest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [20.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [10.0]
can you :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
are there :- S\NP : (lambda $0:e true:t) [31.435469250725863]
highest :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
total :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
how many :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
how many :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
in feet :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
most :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
the :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
gurgaon :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
in feet :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
katni :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
jodhpur :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
the :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
lowest :- NP : (elevation:<lo,i> luckhnow:c) [10.0]
maharashtra :- NP/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
jalgaon :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
largest :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (size:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
is :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> kota:c) [20.0]
reewa :- NP : reewa:c [20.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
rajasthan :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<s,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
higher than :- NP : (elevation:<lo,i> jharkhand:s) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
what :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
please :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
are :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [20.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
largest :- NP : (size:<lo,i> nainital:c) [10.0]
dehradun :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [20.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> deoghar:c) [10.0]
have :- S\S : (lambda $0:t $0) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [20.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
uttrakhand :- S/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
deoghar :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
are :- S/NP : (lambda $0:e $0) [10.0]
smallest :- NP : (size:<lo,i> kanpur:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
show :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
lowest :- NP : (elevation:<lo,i> jharkhand:s) [10.0]
lowest :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
that :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
which :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> luckhnow:c) [10.0]
uttar pradesh :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) uttar_pradesh:s)))) [10.0]
highest :- NP : (elevation:<lo,i> darbhanga:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
with :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
aurangabad :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> rajasthan:s) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
number :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
lowest :- NP : (elevation:<lo,i> darbhanga:c) [10.0]
with :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> ranchi:c) [10.0]
border :- S\NP/NP : (lambda $0:e (lambda $1:e (next_to:<s_pkey,<b_pkey,t>> $1 $0))) [20.0]
border :- S\NP/NP : (lambda $0:e (lambda $1:e (next_to:<s_pkey,<b_pkey,t>> $0 $1))) [20.0]
kota :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
the state of haryana :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<s,s_pkey> $0)))) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
with the :- S/NP : (lambda $0:e $0) [10.0]
highest :- NP : (elevation:<lo,i> mumbai:c) [10.0]
noida :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
with :- S/NP : (lambda $0:e $0) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [20.0]
highest :- NP/NP : (lambda $0:e (elevation:<lo,i> $0)) [10.0]
uttar pradesh :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
smallest :- NP : (size:<lo,i> reewa:c) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> dehradun:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
most :- NP/N/PP/N : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e ($0 $4)))))) [10.0]
mumbai :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
higher than :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
at least one :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
the maharashtra :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<s,s_pkey> $0)))) [10.0]
of :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> bhusawal:c) [10.0]
show :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
by :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [20.0]
noida :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
gurgaon :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [20.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [10.0]
combined :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
population :- NP : (population:<lo,i> maharashtra:s) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
the least :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
the least :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
highest :- S/NP : (lambda $0:e (elevation:<lo,i> $0)) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
patna :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [55.9479341998814]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
aurangabad :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [20.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
largest :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (size:<lo,i> $0)))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [31.435469250725863]
the :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
aurangabad :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
higher than :- NP : (elevation:<lo,i> darbhanga:c) [10.0]
at least one :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [43.483695221017136]
no :- PP/PP : (lambda $0:<e,t> (lambda $1:e (not:<t,t> ($0 $1)))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
show :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
higher than :- NP : (elevation:<lo,i> jalgaon:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
mumbai :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
with :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
highest :- NP : (elevation:<lo,i> deoghar:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [10.0]
how :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
most :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
gurgaon :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
a :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
show :- NP/NP : (lambda $0:e $0) [10.0]
the most :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
the aurangabad :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
lowest :- NP : (elevation:<lo,i> deoghar:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> kota:c) [20.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
the aurangabad :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
kurukshetra :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
can you :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
by :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
in feet :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> rajasthan:s) [10.0]
gurgaon :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
of :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
lowest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (elevation:<lo,i> $4)))))) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
reewa :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) reewa:c)))) [10.0]
show :- S/S : (lambda $0:t $0) [10.0]
higher than :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [31.435469250725863]
that :- S/S : (lambda $0:t $0) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> mumbai:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [20.0]
mumbai :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
that :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> ranchi:c) [10.0]
population :- NP : (population:<lo,i> rishikesh:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
bhopal :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
largest :- NP : (size:<lo,i> noida:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
fewest :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
largest :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [20.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
population :- NP : (population:<lo,i> nagpur:c) [10.0]
uttar pradesh :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<s,s_pkey> $0)))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> uttrakhand:s) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> khandwa:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> nagpur:c) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
population :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (population:<lo,i> $4)))))) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
maharashtra state :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<s,s_pkey> $0)))) [10.0]
higher than :- S/NP : (lambda $0:e (elevation:<lo,i> $0)) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
bhopal :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
smallest :- NP : (size:<lo,i> katni:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [31.435469250725863]
smallest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [20.0]
haryana :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
smallest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> rishikesh:c) [10.0]
highest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
can you :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
sparsest :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [20.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
lowest :- S/NP : (lambda $0:e (elevation:<lo,i> $0)) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
maharashtra :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<s,s_pkey> $0)))) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
is :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [10.0]
population :- NP : (population:<lo,i> uttrakhand:s) [10.0]
aurangabad :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
how :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
aurangabad :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
that :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
higher than :- NP : (elevation:<lo,i> deoghar:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
of :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [20.0]
at least one :- NP : (pkey_retriever:<s,s_pkey> 0:i) [10.0]
by :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
gurgaon :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
largest :- NP : (size:<lo,i> mussoorie:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [10.0]
a :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
smallest :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [20.0]
most :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [10.0]
with the :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
least :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [10.0]
chandigarh :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
have :- N\N/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
dehradun :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
the most :- S/N : (lambda $0:<e,t> (count:<<e,t>,i> (lambda $1:e ($0 $1)))) [10.0]
fewest :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [20.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
jodhpur :- NP : jodhpur:c [20.0]
uttar pradesh :- NP : uttar_pradesh:s [31.435469250725863]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
with :- S/S : (lambda $0:t $0) [10.0]
how many :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
tell me :- NP/NP : (lambda $0:e $0) [10.0]
a :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
number :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [31.435469250725863]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> jalgaon:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [20.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [20.0]
lowest :- NP : (elevation:<lo,i> bhusawal:c) [10.0]
maharashtra :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
uttrakhand :- NP/NP : (lambda $0:e (pkey_retriever:<s,s_pkey> $0)) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> deoghar:c) [20.0]
by :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
the aurangabad :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
that :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
tell me :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
of :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
how many :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [31.435469250725863]
the aurangabad :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
most :- NP/N/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
lowest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (elevation:<lo,i> $2)))) [20.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
the least :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
most :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [31.435469250725863]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
khandwa :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
with :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
ranchi :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
tell me :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
chandigarh :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
bhusawal :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
a :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [10.0]
jodhpur :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> aurangabad:c) [10.0]
higher than :- NP : (elevation:<lo,i> khandwa:c) [10.0]
khandwa :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
luckhnow :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
is :- PP/NP : (lambda $0:e (lambda $1:e (equals:<e,<e,t>> (elevation:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
bhopal :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> jodhpur:c) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
which :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [10.0]
a :- S/S : (lambda $0:t $0) [10.0]
which :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
border :- S/NP : (lambda $0:e (next_to:<b_pkey,s_pkey> $0)) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [31.435469250725863]
ranchi :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
higher than :- NP : (elevation:<lo,i> bhusawal:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> bhusawal:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
can you :- S\S : (lambda $0:e $0) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> bhopal:c) [10.0]
city named mumbai :- S/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> jodhpur:c) [10.0]
are :- S/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [10.0]
population :- NP : (population:<lo,i> kota:c) [10.0]
jodhpur :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
higher than :- NP/NP : (lambda $0:e (elevation:<lo,i> $0)) [10.0]
darbhanga :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) darbhanga:c)))) [10.0]
lowest :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
with :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
maharashtra state :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
deoghar :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> ranchi:c) [10.0]
sparsest :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> rajasthan:s) [10.0]
which :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
highest :- NP : (elevation:<lo,i> jodhpur:c) [10.0]
population :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (population:<lo,i> $1) (elevation:<lo,i> $0)))) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
highest :- NP : (elevation:<lo,i> reewa:c) [10.0]
the aurangabad :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
lowest :- NP\N\N : (lambda $0:<e,t> (lambda $1:<e,e> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($0 $2)) (lambda $3:e ($1 $3))))) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
the least :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
is :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
largest :- NP : (size:<lo,i> bihar:s) [10.0]
highest :- NP : (elevation:<lo,i> chandigarh:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [20.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [20.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
dehradun :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> jaipur:c) [20.0]
population :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (population:<lo,i> $4)))))) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
largest :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
please :- S\NP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
the least :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [10.0]
a :- NP/NP : (lambda $0:e $0) [10.0]
the state of haryana :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<s,s_pkey> $4)))))) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> chandigarh:c) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> gurgaon:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [10.0]
lowest :- NP/NP : (lambda $0:e (elevation:<lo,i> $0)) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> jaipur:c) [10.0]
kurukshetra :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [20.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
smallest :- NP : (size:<lo,i> mumbai:c) [10.0]
rishikesh :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
largest :- NP : (size:<lo,i> aurangabad:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> noida:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
have :- S\S : (lambda $0:e $0) [10.0]
largest :- NP : (size:<lo,i> jaipur:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
patna :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
largest :- NP : (size:<lo,i> kurukshetra:c) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> jharkhand:s) [10.0]
bihar :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
the least :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
excluding :- PP/NP : (lambda $0:e (lambda $1:e (not:<t,t> (equals:<e,<e,t>> $1 $0)))) [20.0]
border :- NP : (next_to:<b_pkey,s_pkey> dehradun:c) [10.0]
uttar pradesh :- NP : (pkey_retriever:<s,s_pkey> madhya_pradesh:s) [10.0]
with :- NP\N/(NP/N) : (lambda $0:<<e,t>,e> (lambda $1:<e,t> ($0 (lambda $2:e ($1 $2))))) [20.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> bhopal:c) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> patna:c) [10.0]
kanpur :- NP : (pkey_retriever:<s,s_pkey> kanpur:c) [10.0]
rajasthan :- NP : (pkey_retriever:<s,s_pkey> reewa:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> kota:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> bihar:s) [10.0]
gurgaon :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
jodhpur :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> uttar_pradesh:s) [10.0]
that :- PP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
a :- N/N : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
haryana :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<s,s_pkey> $0)))) [10.0]
kota :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
bihar :- NP : (pkey_retriever:<s,s_pkey> luckhnow:c) [10.0]
the most :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
city named mumbai :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (elevation:<lo,i> $1) (pkey_retriever:<c,c_pkey> $0)))) [10.0]
a :- S/NP : (lambda $0:e $0) [10.0]
bihar :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<s,s_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
jharkhand :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
bihar :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
what :- S\S : (lambda $0:e $0) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> kanpur:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
the aurangabad :- NP : (pkey_retriever:<c,c_pkey> luckhnow:c) [10.0]
bhusawal :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> dehradun:c) [10.0]
how many :- S/NP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
higher than :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (elevation:<lo,i> $4)))))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> maharashtra:s) [10.0]
city named mumbai :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
mumbai :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> nagpur:c) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> uttrakhand:s) [10.0]
in feet :- S\S : (lambda $0:t $0) [10.0]
at least one :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [10.0]
city named mumbai :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<c,c_pkey> $2)))) [10.0]
darbhanga :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
largest :- NP : (size:<lo,i> jalgaon:c) [10.0]
jalgaon :- NP : (pkey_retriever:<c,c_pkey> haryana:s) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> jodhpur:c) [10.0]
rajasthan :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
dehradun :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
jalgaon :- NP/N/PP : (lambda $0:<e,i> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> rishikesh:c) [10.0]
population :- NP : (population:<lo,i> bhopal:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> haryana:s) [55.9479341998814]
deoghar :- NP : (pkey_retriever:<c,c_pkey> chandigarh:c) [10.0]
please :- S\S : (lambda $0:t $0) [20.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
least :- S/(S\NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (count:<<e,t>,i> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2)))))) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> kota:c) [10.0]
fewest :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
higher than :- NP : (elevation:<lo,i> rajasthan:s) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
please :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> kurukshetra:c) [10.0]
by :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
fewest :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [20.0]
largest :- NP : (size:<lo,i> rishikesh:c) [10.0]
does :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [20.0]
is :- S/(S/NP)/N : (lambda $0:<e,t> (lambda $1:<e,t> (lambda $2:e (and:<t*,t> ($0 $2) ($1 $2))))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
katni :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (pkey_retriever:<c,c_pkey> $4)))))) [10.0]
the maharashtra :- NP : (pkey_retriever:<s,s_pkey> nainital:c) [10.0]
what :- N/N : (lambda $0:<e,e> (lambda $1:e ($0 $1))) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> maharashtra:s) [10.0]
of :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
noida :- NP : (pkey_retriever:<c,c_pkey> katni:c) [10.0]
the least :- NP\N\(PP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
nagpur :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
largest :- NP : (size:<lo,i> gurgaon:c) [10.0]
sparsest :- NP/N/PP : (lambda $0:<e,e> (lambda $1:<e,t> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e (and:<t*,t> ($1 $3) ($2 $3))) (lambda $4:e (size:<lo,i> $4)))))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> kanpur:c) [10.0]
total :- NP/N/N : (lambda $0:<e,e> (lambda $1:<e,t> (sum:<<e,t>,<<e,i>,i>> (lambda $2:e ($1 $2)) (lambda $3:e ($0 $3))))) [20.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
lowest :- NP : (elevation:<lo,i> ranchi:c) [10.0]
maharashtra state :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> mussoorie:c) [10.0]
katni :- NP : (pkey_retriever:<c,c_pkey> khandwa:c) [10.0]
dehradun :- NP : (pkey_retriever:<c,c_pkey> uttar_pradesh:s) [10.0]
what :- PP/(S/NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
jaipur :- NP : (pkey_retriever:<c,c_pkey> bihar:s) [10.0]
rajasthan :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (pkey_retriever:<s,s_pkey> $2)))) [10.0]
ranchi :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
nainital :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
luckhnow :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [10.0]
in meters :- S\NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
with :- NP/NP : (lambda $0:e $0) [10.0]
show :- NP/N : (lambda $0:<e,t> (the:<<e,t>,e> (lambda $1:e ($0 $1)))) [10.0]
the aurangabad :- NP : (pkey_retriever:<s,s_pkey> aurangabad:c) [10.0]
deoghar :- NP : (pkey_retriever:<c,c_pkey> darbhanga:c) [10.0]
ranchi :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
bihar :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) bihar:s)))) [10.0]
fewest :- NP/N : (lambda $0:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $1:e ($0 $1)) (lambda $2:e (size:<lo,i> $2)))) [10.0]
madhya pradesh :- NP : (pkey_retriever:<s,s_pkey> katni:c) [10.0]
border :- NP : (next_to:<b_pkey,s_pkey> deoghar:c) [10.0]
the state of haryana :- NP : (pkey_retriever:<s,s_pkey> gurgaon:c) [10.0]
the least :- NP\N\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:<e,t> (argmin:<<e,t>,<<e,i>,e>> (lambda $3:e ($2 $3)) (lambda $4:e (count:<<e,t>,i> (lambda $5:e (and:<t*,t> ($0 $5) ($1 $5 $4))))))))) [31.435469250725863]
bhusawal :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) bhusawal:c)))) [10.0]
khandwa :- NP : (pkey_retriever:<c,c_pkey> patna:c) [10.0]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> jharkhand:s) [10.0]
at least one :- S\NP\(S\NP/NP)/N : (lambda $0:<e,t> (lambda $1:<e,<e,t>> (lambda $2:e (>:<i,<i,t>> (count:<<e,t>,i> (lambda $3:e (and:<t*,t> ($0 $3) ($1 $3 $2)))) 0:i)))) [43.483695221017136]
uttrakhand :- NP : (pkey_retriever:<s,s_pkey> noida:c) [10.0]
city named mumbai :- NP : (pkey_retriever:<c,c_pkey> mumbai:c) [43.483695221017136]
dehradun :- NP : (pkey_retriever:<c,c_pkey> reewa:c) [10.0]
can you :- PP/PP : (lambda $0:<e,t> (lambda $1:e ($0 $1))) [10.0]
maharashtra :- NP : (pkey_retriever:<s,s_pkey> jalgaon:c) [10.0]
which :- S\S : (lambda $0:e $0) [10.0]
lowest :- NP : (elevation:<lo,i> rajasthan:s) [10.0]
khandwa :- NP/NP : (lambda $0:e (pkey_retriever:<c,c_pkey> $0)) [10.0]
haryana :- NP : (pkey_retriever:<s,s_pkey> kurukshetra:c) [10.0]
reewa :- NP : (pkey_retriever:<c,c_pkey> madhya_pradesh:s) [10.0]
is :- S\S : (lambda $0:t $0) [10.0]
excluding :- S\NP/NP : (lambda $0:e (lambda $1:e (equals:<e,<e,t>> $1 $0))) [10.0]
excluding :- S\NP/NP : (lambda $0:e (lambda $1:e (equals:<e,<e,t>> $0 $1))) [10.0]
kanpur :- NP : (pkey_retriever:<c,c_pkey> nainital:c) [10.0]
mussoorie :- NP : (pkey_retriever:<c,c_pkey> mussoorie:c) [20.0]
darbhanga :- NP : (pkey_retriever:<s,s_pkey> darbhanga:c) [10.0]
katni :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (pkey_retriever:<c,c_pkey> $1) (elevation:<lo,i> $0)))) [10.0]
Feature vector
{DYNSKIP=-1.000, FACLEX#LEX#0#0=0.000, FACLEX#LEX#0#22=10.000, FACLEX#LEX#0#39=10.000, FACLEX#LEX#0#7=0.000, FACLEX#LEX#1#1=0.000, FACLEX#LEX#1#37=10.000, FACLEX#LEX#1#42=0.000, FACLEX#LEX#10#11=0.000, FACLEX#LEX#10#2=33.484, FACLEX#LEX#100#15=10.000, FACLEX#LEX#100#22=0.000, FACLEX#LEX#101#110=10.000, FACLEX#LEX#101#66=0.000, FACLEX#LEX#101#76=10.000, FACLEX#LEX#102#110=10.000, FACLEX#LEX#102#66=0.000, FACLEX#LEX#102#76=10.000, FACLEX#LEX#103#55=10.000, FACLEX#LEX#103#85=0.000, FACLEX#LEX#104#60=10.000, FACLEX#LEX#105#60=10.000, FACLEX#LEX#106#110=10.000, FACLEX#LEX#106#72=0.000, FACLEX#LEX#106#76=10.000, FACLEX#LEX#107#86=21.435, FACLEX#LEX#108#110=10.000, FACLEX#LEX#108#66=0.000, FACLEX#LEX#108#76=10.000, FACLEX#LEX#109#87=10.000, FACLEX#LEX#109#94=10.000, FACLEX#LEX#11#13=10.000, FACLEX#LEX#11#70=10.000, FACLEX#LEX#11#9=0.000, FACLEX#LEX#11#90=10.000, FACLEX#LEX#110#88=0.000, FACLEX#LEX#110#98=10.000, FACLEX#LEX#111#110=10.000, FACLEX#LEX#111#66=0.000, FACLEX#LEX#111#76=10.000, FACLEX#LEX#112#81=21.435, FACLEX#LEX#112#89=0.000, FACLEX#LEX#112#96=21.435, FACLEX#LEX#113#17=0.000, FACLEX#LEX#113#43=10.000, FACLEX#LEX#113#63=10.000, FACLEX#LEX#114#60=10.000, FACLEX#LEX#115#110=10.000, FACLEX#LEX#115#66=0.000, FACLEX#LEX#115#72=10.000, FACLEX#LEX#116#100=10.000, FACLEX#LEX#116#67=0.000, FACLEX#LEX#117#110=10.000, FACLEX#LEX#117#66=0.000, FACLEX#LEX#117#76=10.000, FACLEX#LEX#118#110=10.000, FACLEX#LEX#118#66=0.000, FACLEX#LEX#118#76=10.000, FACLEX#LEX#119#83=21.435, FACLEX#LEX#119#92=21.435, FACLEX#LEX#12#12=0.000, FACLEX#LEX#12#48=10.000, FACLEX#LEX#120#81=10.000, FACLEX#LEX#120#93=0.000, FACLEX#LEX#120#96=10.000, FACLEX#LEX#121#81=10.000, FACLEX#LEX#121#89=0.000, FACLEX#LEX#121#96=10.000, FACLEX#LEX#122#95=0.000, FACLEX#LEX#122#98=10.000, FACLEX#LEX#123#60=10.000, FACLEX#LEX#124#60=10.000, FACLEX#LEX#125#30=10.000, FACLEX#LEX#125#38=0.000, FACLEX#LEX#126#60=10.000, FACLEX#LEX#127#33=10.000, FACLEX#LEX#127#38=0.000, FACLEX#LEX#128#88=10.000, FACLEX#LEX#128#95=0.000, FACLEX#LEX#128#98=10.000, FACLEX#LEX#129#87=21.435, FACLEX#LEX#129#93=0.000, FACLEX#LEX#129#94=21.435, FACLEX#LEX#129#96=0.000, FACLEX#LEX#13#13=0.000, FACLEX#LEX#13#63=21.435, FACLEX#LEX#13#69=0.000, FACLEX#LEX#130#110=10.000, FACLEX#LEX#130#66=0.000, FACLEX#LEX#130#76=10.000, FACLEX#LEX#131#110=10.000, FACLEX#LEX#131#76=10.000, FACLEX#LEX#132#110=10.000, FACLEX#LEX#132#72=0.000, FACLEX#LEX#132#76=10.000, FACLEX#LEX#133#60=21.435, FACLEX#LEX#134#60=10.000, FACLEX#LEX#135#83=10.000, FACLEX#LEX#135#92=10.000, FACLEX#LEX#136#110=10.000, FACLEX#LEX#136#72=0.000, FACLEX#LEX#136#76=10.000, FACLEX#LEX#137#110=21.435, FACLEX#LEX#137#72=21.435, FACLEX#LEX#138#60=10.000, FACLEX#LEX#139#60=10.000, FACLEX#LEX#14#14=0.000, FACLEX#LEX#14#20=10.000, FACLEX#LEX#140#110=10.000, FACLEX#LEX#140#66=0.000, FACLEX#LEX#140#76=10.000, FACLEX#LEX#141#97=33.484, FACLEX#LEX#142#110=10.000, FACLEX#LEX#142#72=0.000, FACLEX#LEX#142#76=10.000, FACLEX#LEX#143#110=21.435, FACLEX#LEX#143#66=0.000, FACLEX#LEX#143#76=21.435, FACLEX#LEX#144#110=10.000, FACLEX#LEX#144#66=0.000, FACLEX#LEX#144#72=10.000, FACLEX#LEX#145#99=10.000, FACLEX#LEX#146#110=21.435, FACLEX#LEX#146#72=21.435, FACLEX#LEX#146#76=0.000, FACLEX#LEX#147#110=10.000, FACLEX#LEX#147#66=0.000, FACLEX#LEX#147#76=10.000, FACLEX#LEX#148#95=10.000, FACLEX#LEX#148#98=10.000, FACLEX#LEX#149#60=10.000, FACLEX#LEX#15#0=0.000, FACLEX#LEX#15#22=0.000, FACLEX#LEX#15#40=10.000, FACLEX#LEX#150#60=10.000, FACLEX#LEX#151#66=0.000, FACLEX#LEX#151#76=33.484, FACLEX#LEX#152#110=10.000, FACLEX#LEX#152#72=10.000, FACLEX#LEX#152#76=0.000, FACLEX#LEX#153#66=33.484, FACLEX#LEX#153#76=0.000, FACLEX#LEX#154#110=10.000, FACLEX#LEX#154#76=10.000, FACLEX#LEX#155#60=10.000, FACLEX#LEX#156#67=0.000, FACLEX#LEX#156#73=10.000, FACLEX#LEX#156#74=10.000, FACLEX#LEX#157#101=21.435, FACLEX#LEX#157#109=21.435, FACLEX#LEX#158#110=45.948, FACLEX#LEX#158#72=45.948, FACLEX#LEX#158#76=0.000, FACLEX#LEX#159#110=10.000, FACLEX#LEX#159#72=0.000, FACLEX#LEX#159#76=10.000, FACLEX#LEX#16#15=0.000, FACLEX#LEX#16#8=10.000, FACLEX#LEX#160#110=10.000, FACLEX#LEX#160#76=10.000, FACLEX#LEX#161#60=10.000, FACLEX#LEX#162#60=10.000, FACLEX#LEX#163#60=10.000, FACLEX#LEX#164#60=21.435, FACLEX#LEX#165#102=10.000, FACLEX#LEX#165#105=10.000, FACLEX#LEX#166#103=21.435, FACLEX#LEX#167#110=10.000, FACLEX#LEX#167#72=10.000, FACLEX#LEX#168#60=10.000, FACLEX#LEX#169#60=10.000, FACLEX#LEX#17#16=0.000, FACLEX#LEX#17#28=10.000, FACLEX#LEX#17#51=10.000, FACLEX#LEX#170#110=10.000, FACLEX#LEX#170#72=0.000, FACLEX#LEX#170#76=10.000, FACLEX#LEX#171#60=21.435, FACLEX#LEX#172#83=10.000, FACLEX#LEX#172#92=10.000, FACLEX#LEX#173#110=10.000, FACLEX#LEX#173#66=0.000, FACLEX#LEX#173#76=10.000, FACLEX#LEX#174#60=33.484, FACLEX#LEX#175#110=10.000, FACLEX#LEX#175#72=10.000, FACLEX#LEX#176#104=21.435, FACLEX#LEX#177#60=10.000, FACLEX#LEX#178#60=10.000, FACLEX#LEX#179#60=10.000, FACLEX#LEX#18#11=10.000, FACLEX#LEX#18#12=0.000, FACLEX#LEX#18#28=0.000, FACLEX#LEX#180#83=21.435, FACLEX#LEX#180#92=21.435, FACLEX#LEX#181#60=10.000, FACLEX#LEX#182#60=21.435, FACLEX#LEX#183#110=10.000, FACLEX#LEX#183#72=0.000, FACLEX#LEX#183#76=10.000, FACLEX#LEX#184#60=10.000, FACLEX#LEX#185#106=33.484, FACLEX#LEX#186#107=21.435, FACLEX#LEX#187#60=10.000, FACLEX#LEX#188#60=45.948, FACLEX#LEX#189#60=10.000, FACLEX#LEX#19#17=0.000, FACLEX#LEX#19#21=0.000, FACLEX#LEX#19#64=10.000, FACLEX#LEX#19#69=10.000, FACLEX#LEX#19#9=10.000, FACLEX#LEX#190#108=33.484, FACLEX#LEX#191#60=10.000, FACLEX#LEX#192#60=10.000, FACLEX#LEX#193#60=21.435, FACLEX#LEX#194#60=10.000, FACLEX#LEX#195#60=10.000, FACLEX#LEX#196#60=10.000, FACLEX#LEX#2#1=10.000, FACLEX#LEX#2#2=0.000, FACLEX#LEX#2#24=0.000, FACLEX#LEX#20#18=0.000, FACLEX#LEX#20#33=10.000, FACLEX#LEX#20#43=0.000, FACLEX#LEX#20#44=0.000, FACLEX#LEX#20#52=0.000, FACLEX#LEX#20#70=0.000, FACLEX#LEX#20#77=10.000, FACLEX#LEX#20#90=0.000, FACLEX#LEX#21#14=10.000, FACLEX#LEX#21#15=0.000, FACLEX#LEX#22#19=0.000, FACLEX#LEX#22#54=10.000, FACLEX#LEX#23#20=0.000, FACLEX#LEX#23#41=10.000, FACLEX#LEX#24#0=10.000, FACLEX#LEX#24#23=0.000, FACLEX#LEX#24#58=0.000, FACLEX#LEX#25#17=0.000, FACLEX#LEX#25#18=10.000, FACLEX#LEX#25#30=10.000, FACLEX#LEX#25#33=10.000, FACLEX#LEX#25#50=10.000, FACLEX#LEX#25#6=10.000, FACLEX#LEX#25#77=10.000, FACLEX#LEX#26#19=0.000, FACLEX#LEX#26#58=10.000, FACLEX#LEX#27#24=10.000, FACLEX#LEX#27#25=0.000, FACLEX#LEX#27#45=0.000, FACLEX#LEX#28#100=0.000, FACLEX#LEX#28#26=33.484, FACLEX#LEX#29#27=10.000, FACLEX#LEX#29#53=10.000, FACLEX#LEX#29#56=10.000, FACLEX#LEX#29#75=10.000, FACLEX#LEX#3#3=0.000, FACLEX#LEX#3#36=10.000, FACLEX#LEX#30#10=0.000, FACLEX#LEX#30#35=21.435, FACLEX#LEX#30#4=21.435, FACLEX#LEX#31#21=0.000, FACLEX#LEX#31#63=0.000, FACLEX#LEX#31#64=0.000, FACLEX#LEX#31#69=21.435, FACLEX#LEX#32#9=0.000, FACLEX#LEX#32#90=10.000, FACLEX#LEX#33#31=10.000, FACLEX#LEX#33#5=0.000, FACLEX#LEX#34#29=0.000, FACLEX#LEX#34#49=0.000, FACLEX#LEX#34#54=0.000, FACLEX#LEX#34#7=10.000, FACLEX#LEX#35#30=0.000, FACLEX#LEX#35#52=10.000, FACLEX#LEX#36#30=0.000, FACLEX#LEX#36#43=10.000, FACLEX#LEX#36#50=0.000, FACLEX#LEX#36#63=10.000, FACLEX#LEX#36#90=10.000, FACLEX#LEX#37#31=0.000, FACLEX#LEX#37#37=0.000, FACLEX#LEX#37#61=45.948, FACLEX#LEX#38#27=10.000, FACLEX#LEX#38#32=0.000, FACLEX#LEX#39#17=10.000, FACLEX#LEX#39#18=10.000, FACLEX#LEX#39#30=10.000, FACLEX#LEX#39#33=0.000, FACLEX#LEX#4#4=0.000, FACLEX#LEX#4#51=0.000, FACLEX#LEX#4#65=10.000, FACLEX#LEX#40#34=10.000, FACLEX#LEX#41#2=10.000, FACLEX#LEX#41#35=0.000, FACLEX#LEX#42#36=0.000, FACLEX#LEX#42#49=10.000, FACLEX#LEX#42#65=0.000, FACLEX#LEX#43#38=0.000, FACLEX#LEX#43#9=21.435, FACLEX#LEX#44#10=10.000, FACLEX#LEX#44#39=0.000, FACLEX#LEX#45#12=10.000, FACLEX#LEX#45#40=0.000, FACLEX#LEX#46#41=0.000, FACLEX#LEX#46#45=10.000, FACLEX#LEX#47#15=21.435, FACLEX#LEX#47#20=0.000, FACLEX#LEX#48#23=10.000, FACLEX#LEX#48#34=0.000, FACLEX#LEX#49#42=0.000, FACLEX#LEX#49#61=10.000, FACLEX#LEX#5#28=10.000, FACLEX#LEX#5#5=0.000, FACLEX#LEX#50#32=21.435, FACLEX#LEX#50#82=21.435, FACLEX#LEX#51#47=0.000, FACLEX#LEX#51#78=10.000, FACLEX#LEX#52#29=10.000, FACLEX#LEX#52#34=0.000, FACLEX#LEX#53#42=10.000, FACLEX#LEX#53#48=0.000, FACLEX#LEX#53#62=0.000, FACLEX#LEX#54#12=0.000, FACLEX#LEX#54#15=21.435, FACLEX#LEX#55#21=0.000, FACLEX#LEX#55#69=21.435, FACLEX#LEX#56#27=10.000, FACLEX#LEX#56#32=10.000, FACLEX#LEX#56#53=0.000, FACLEX#LEX#56#75=0.000, FACLEX#LEX#56#82=10.000, FACLEX#LEX#57#22=10.000, FACLEX#LEX#57#5=0.000, FACLEX#LEX#58#55=0.000, FACLEX#LEX#58#85=10.000, FACLEX#LEX#58#91=10.000, FACLEX#LEX#59#27=10.000, FACLEX#LEX#59#32=10.000, FACLEX#LEX#59#56=0.000, FACLEX#LEX#59#82=10.000, FACLEX#LEX#59#84=0.000, FACLEX#LEX#6#6=0.000, FACLEX#LEX#6#90=21.435, FACLEX#LEX#60#27=10.000, FACLEX#LEX#60#59=0.000, FACLEX#LEX#61#60=10.000, FACLEX#LEX#62#41=0.000, FACLEX#LEX#62#62=21.435, FACLEX#LEX#63#46=10.000, FACLEX#LEX#63#61=0.000, FACLEX#LEX#64#27=0.000, FACLEX#LEX#64#32=10.000, FACLEX#LEX#64#82=10.000, FACLEX#LEX#65#60=10.000, FACLEX#LEX#66#26=0.000, FACLEX#LEX#66#73=10.000, FACLEX#LEX#67#110=10.000, FACLEX#LEX#67#66=0.000, FACLEX#LEX#67#76=10.000, FACLEX#LEX#68#67=21.435, FACLEX#LEX#69#21=10.000, FACLEX#LEX#69#68=0.000, FACLEX#LEX#7#3=10.000, FACLEX#LEX#7#8=0.000, FACLEX#LEX#70#51=0.000, FACLEX#LEX#70#57=10.000, FACLEX#LEX#71#34=0.000, FACLEX#LEX#71#5=10.000, FACLEX#LEX#72#16=10.000, FACLEX#LEX#72#39=0.000, FACLEX#LEX#73#19=21.435, FACLEX#LEX#73#41=0.000, FACLEX#LEX#74#71=0.000, FACLEX#LEX#74#80=10.000, FACLEX#LEX#75#26=0.000, FACLEX#LEX#75#73=10.000, FACLEX#LEX#76#38=0.000, FACLEX#LEX#76#6=10.000, FACLEX#LEX#77#13=0.000, FACLEX#LEX#77#77=0.000, FACLEX#LEX#77#9=21.435, FACLEX#LEX#78#19=0.000, FACLEX#LEX#78#25=10.000, FACLEX#LEX#79#27=10.000, FACLEX#LEX#79#53=0.000, FACLEX#LEX#8#38=10.000, FACLEX#LEX#8#44=10.000, FACLEX#LEX#8#6=10.000, FACLEX#LEX#8#68=10.000, FACLEX#LEX#8#9=0.000, FACLEX#LEX#80#110=21.435, FACLEX#LEX#80#72=21.435, FACLEX#LEX#81#27=10.000, FACLEX#LEX#81#47=10.000, FACLEX#LEX#81#56=10.000, FACLEX#LEX#81#75=10.000, FACLEX#LEX#81#84=10.000, FACLEX#LEX#82#110=10.000, FACLEX#LEX#82#72=0.000, FACLEX#LEX#82#76=10.000, FACLEX#LEX#83#55=0.000, FACLEX#LEX#83#86=10.000, FACLEX#LEX#84#18=10.000, FACLEX#LEX#84#30=10.000, FACLEX#LEX#84#64=0.000, FACLEX#LEX#85#73=10.000, FACLEX#LEX#85#74=10.000, FACLEX#LEX#86#110=10.000, FACLEX#LEX#86#76=10.000, FACLEX#LEX#87#32=21.435, FACLEX#LEX#87#78=0.000, FACLEX#LEX#87#82=21.435, FACLEX#LEX#88#60=10.000, FACLEX#LEX#89#79=33.484, FACLEX#LEX#9#10=0.000, FACLEX#LEX#9#31=21.435, FACLEX#LEX#9#46=0.000, FACLEX#LEX#9#57=0.000, FACLEX#LEX#90#27=10.000, FACLEX#LEX#90#56=0.000, FACLEX#LEX#90#59=10.000, FACLEX#LEX#91#80=0.000, FACLEX#LEX#91#89=33.484, FACLEX#LEX#91#94=0.000, FACLEX#LEX#92#110=10.000, FACLEX#LEX#92#72=0.000, FACLEX#LEX#92#76=10.000, FACLEX#LEX#93#110=21.435, FACLEX#LEX#93#66=0.000, FACLEX#LEX#93#72=21.435, FACLEX#LEX#94#71=21.435, FACLEX#LEX#94#81=0.000, FACLEX#LEX#94#93=21.435, FACLEX#LEX#95#27=10.000, FACLEX#LEX#95#59=10.000, FACLEX#LEX#95#75=0.000, FACLEX#LEX#96#110=10.000, FACLEX#LEX#96#72=0.000, FACLEX#LEX#96#76=10.000, FACLEX#LEX#97#83=10.000, FACLEX#LEX#97#92=10.000, FACLEX#LEX#98#110=10.000, FACLEX#LEX#98#72=0.000, FACLEX#LEX#98#76=10.000, FACLEX#LEX#99#110=10.000, FACLEX#LEX#99#66=0.000, FACLEX#LEX#99#72=10.000, FACLEX#LEXDEFAULT=1.000, FACLEX#TMP#0=0.000, FACLEX#TMP#1=0.000, FACLEX#TMP#10=0.000, FACLEX#TMP#100=0.000, FACLEX#TMP#101=0.000, FACLEX#TMP#102=0.000, FACLEX#TMP#103=0.000, FACLEX#TMP#104=0.000, FACLEX#TMP#105=0.000, FACLEX#TMP#106=0.000, FACLEX#TMP#107=0.000, FACLEX#TMP#108=0.000, FACLEX#TMP#109=0.000, FACLEX#TMP#11=0.000, FACLEX#TMP#110=0.000, FACLEX#TMP#12=0.000, FACLEX#TMP#13=0.000, FACLEX#TMP#14=0.000, FACLEX#TMP#15=0.000, FACLEX#TMP#16=0.000, FACLEX#TMP#17=0.000, FACLEX#TMP#18=0.000, FACLEX#TMP#19=0.000, FACLEX#TMP#2=0.000, FACLEX#TMP#20=0.000, FACLEX#TMP#21=0.000, FACLEX#TMP#22=0.000, FACLEX#TMP#23=0.000, FACLEX#TMP#24=0.000, FACLEX#TMP#25=0.000, FACLEX#TMP#26=0.000, FACLEX#TMP#27=0.000, FACLEX#TMP#28=0.000, FACLEX#TMP#29=0.000, FACLEX#TMP#3=0.000, FACLEX#TMP#30=0.000, FACLEX#TMP#31=0.000, FACLEX#TMP#32=0.000, FACLEX#TMP#33=0.000, FACLEX#TMP#34=0.000, FACLEX#TMP#35=0.000, FACLEX#TMP#36=0.000, FACLEX#TMP#37=0.000, FACLEX#TMP#38=0.000, FACLEX#TMP#39=0.000, FACLEX#TMP#4=0.000, FACLEX#TMP#40=0.000, FACLEX#TMP#41=0.000, FACLEX#TMP#42=0.000, FACLEX#TMP#43=0.000, FACLEX#TMP#44=0.000, FACLEX#TMP#45=0.000, FACLEX#TMP#46=0.000, FACLEX#TMP#47=0.000, FACLEX#TMP#48=0.000, FACLEX#TMP#49=0.000, FACLEX#TMP#5=0.000, FACLEX#TMP#50=0.000, FACLEX#TMP#51=0.000, FACLEX#TMP#52=0.000, FACLEX#TMP#53=0.000, FACLEX#TMP#54=0.000, FACLEX#TMP#55=0.000, FACLEX#TMP#56=0.000, FACLEX#TMP#57=0.000, FACLEX#TMP#58=0.000, FACLEX#TMP#59=0.000, FACLEX#TMP#6=0.000, FACLEX#TMP#60=0.000, FACLEX#TMP#61=0.000, FACLEX#TMP#62=0.000, FACLEX#TMP#63=0.000, FACLEX#TMP#64=0.000, FACLEX#TMP#65=0.000, FACLEX#TMP#66=0.000, FACLEX#TMP#67=0.000, FACLEX#TMP#68=0.000, FACLEX#TMP#69=0.000, FACLEX#TMP#7=0.000, FACLEX#TMP#70=0.000, FACLEX#TMP#71=0.000, FACLEX#TMP#72=0.000, FACLEX#TMP#73=0.000, FACLEX#TMP#74=0.000, FACLEX#TMP#75=0.000, FACLEX#TMP#76=0.000, FACLEX#TMP#77=0.000, FACLEX#TMP#78=0.000, FACLEX#TMP#79=0.000, FACLEX#TMP#8=0.000, FACLEX#TMP#80=0.000, FACLEX#TMP#81=0.000, FACLEX#TMP#82=0.000, FACLEX#TMP#83=0.000, FACLEX#TMP#84=0.000, FACLEX#TMP#85=0.000, FACLEX#TMP#86=0.000, FACLEX#TMP#87=0.000, FACLEX#TMP#88=0.000, FACLEX#TMP#89=0.000, FACLEX#TMP#9=0.000, FACLEX#TMP#90=0.000, FACLEX#TMP#91=0.000, FACLEX#TMP#92=0.000, FACLEX#TMP#93=0.000, FACLEX#TMP#94=0.000, FACLEX#TMP#95=0.000, FACLEX#TMP#96=0.000, FACLEX#TMP#97=0.000, FACLEX#TMP#98=0.000, FACLEX#TMP#99=0.000, FACLEX#TMPDEFAULT=1.000, FACLEX#XEME#0=10.000, FACLEX#XEME#1=10.000, FACLEX#XEME#10=10.000, FACLEX#XEME#100=10.000, FACLEX#XEME#101=10.000, FACLEX#XEME#102=10.000, FACLEX#XEME#103=10.000, FACLEX#XEME#104=10.000, FACLEX#XEME#105=10.000, FACLEX#XEME#106=10.000, FACLEX#XEME#107=10.000, FACLEX#XEME#108=10.000, FACLEX#XEME#109=10.000, FACLEX#XEME#11=10.000, FACLEX#XEME#110=10.000, FACLEX#XEME#111=10.000, FACLEX#XEME#112=10.000, FACLEX#XEME#113=10.000, FACLEX#XEME#114=10.000, FACLEX#XEME#115=10.000, FACLEX#XEME#116=10.000, FACLEX#XEME#117=10.000, FACLEX#XEME#118=10.000, FACLEX#XEME#119=10.000, FACLEX#XEME#12=10.000, FACLEX#XEME#120=10.000, FACLEX#XEME#121=10.000, FACLEX#XEME#122=10.000, FACLEX#XEME#123=10.000, FACLEX#XEME#124=10.000, FACLEX#XEME#125=10.000, FACLEX#XEME#126=10.000, FACLEX#XEME#127=10.000, FACLEX#XEME#128=10.000, FACLEX#XEME#129=10.000, FACLEX#XEME#13=10.000, FACLEX#XEME#130=10.000, FACLEX#XEME#131=10.000, FACLEX#XEME#132=10.000, FACLEX#XEME#133=10.000, FACLEX#XEME#134=10.000, FACLEX#XEME#135=10.000, FACLEX#XEME#136=10.000, FACLEX#XEME#137=10.000, FACLEX#XEME#138=10.000, FACLEX#XEME#139=10.000, FACLEX#XEME#14=10.000, FACLEX#XEME#140=10.000, FACLEX#XEME#141=10.000, FACLEX#XEME#142=10.000, FACLEX#XEME#143=10.000, FACLEX#XEME#144=10.000, FACLEX#XEME#145=10.000, FACLEX#XEME#146=10.000, FACLEX#XEME#147=10.000, FACLEX#XEME#148=10.000, FACLEX#XEME#149=10.000, FACLEX#XEME#15=10.000, FACLEX#XEME#150=10.000, FACLEX#XEME#151=10.000, FACLEX#XEME#152=10.000, FACLEX#XEME#153=10.000, FACLEX#XEME#154=10.000, FACLEX#XEME#155=10.000, FACLEX#XEME#156=10.000, FACLEX#XEME#157=10.000, FACLEX#XEME#158=10.000, FACLEX#XEME#159=10.000, FACLEX#XEME#16=10.000, FACLEX#XEME#160=10.000, FACLEX#XEME#161=10.000, FACLEX#XEME#162=10.000, FACLEX#XEME#163=10.000, FACLEX#XEME#164=10.000, FACLEX#XEME#165=10.000, FACLEX#XEME#166=10.000, FACLEX#XEME#167=10.000, FACLEX#XEME#168=10.000, FACLEX#XEME#169=10.000, FACLEX#XEME#17=10.000, FACLEX#XEME#170=10.000, FACLEX#XEME#171=10.000, FACLEX#XEME#172=10.000, FACLEX#XEME#173=10.000, FACLEX#XEME#174=10.000, FACLEX#XEME#175=10.000, FACLEX#XEME#176=10.000, FACLEX#XEME#177=10.000, FACLEX#XEME#178=10.000, FACLEX#XEME#179=10.000, FACLEX#XEME#18=10.000, FACLEX#XEME#180=10.000, FACLEX#XEME#181=10.000, FACLEX#XEME#182=10.000, FACLEX#XEME#183=10.000, FACLEX#XEME#184=10.000, FACLEX#XEME#185=10.000, FACLEX#XEME#186=10.000, FACLEX#XEME#187=10.000, FACLEX#XEME#188=10.000, FACLEX#XEME#189=10.000, FACLEX#XEME#19=10.000, FACLEX#XEME#190=10.000, FACLEX#XEME#191=10.000, FACLEX#XEME#192=10.000, FACLEX#XEME#193=10.000, FACLEX#XEME#194=10.000, FACLEX#XEME#195=10.000, FACLEX#XEME#196=10.000, FACLEX#XEME#2=10.000, FACLEX#XEME#20=10.000, FACLEX#XEME#21=10.000, FACLEX#XEME#22=10.000, FACLEX#XEME#23=10.000, FACLEX#XEME#24=10.000, FACLEX#XEME#25=10.000, FACLEX#XEME#26=10.000, FACLEX#XEME#27=10.000, FACLEX#XEME#28=10.000, FACLEX#XEME#29=10.000, FACLEX#XEME#3=10.000, FACLEX#XEME#30=10.000, FACLEX#XEME#31=10.000, FACLEX#XEME#32=10.000, FACLEX#XEME#33=10.000, FACLEX#XEME#34=10.000, FACLEX#XEME#35=10.000, FACLEX#XEME#36=10.000, FACLEX#XEME#37=10.000, FACLEX#XEME#38=10.000, FACLEX#XEME#39=10.000, FACLEX#XEME#4=10.000, FACLEX#XEME#40=10.000, FACLEX#XEME#41=10.000, FACLEX#XEME#42=10.000, FACLEX#XEME#43=10.000, FACLEX#XEME#44=10.000, FACLEX#XEME#45=10.000, FACLEX#XEME#46=10.000, FACLEX#XEME#47=10.000, FACLEX#XEME#48=10.000, FACLEX#XEME#49=10.000, FACLEX#XEME#5=10.000, FACLEX#XEME#50=10.000, FACLEX#XEME#51=10.000, FACLEX#XEME#52=10.000, FACLEX#XEME#53=10.000, FACLEX#XEME#54=10.000, FACLEX#XEME#55=10.000, FACLEX#XEME#56=10.000, FACLEX#XEME#57=10.000, FACLEX#XEME#58=10.000, FACLEX#XEME#59=10.000, FACLEX#XEME#6=10.000, FACLEX#XEME#60=10.000, FACLEX#XEME#61=10.000, FACLEX#XEME#62=10.000, FACLEX#XEME#63=10.000, FACLEX#XEME#64=10.000, FACLEX#XEME#65=10.000, FACLEX#XEME#66=10.000, FACLEX#XEME#67=10.000, FACLEX#XEME#68=10.000, FACLEX#XEME#69=10.000, FACLEX#XEME#7=10.000, FACLEX#XEME#70=10.000, FACLEX#XEME#71=10.000, FACLEX#XEME#72=10.000, FACLEX#XEME#73=10.000, FACLEX#XEME#74=10.000, FACLEX#XEME#75=10.000, FACLEX#XEME#76=10.000, FACLEX#XEME#77=10.000, FACLEX#XEME#78=10.000, FACLEX#XEME#79=10.000, FACLEX#XEME#8=10.000, FACLEX#XEME#80=10.000, FACLEX#XEME#81=10.000, FACLEX#XEME#82=10.000, FACLEX#XEME#83=10.000, FACLEX#XEME#84=10.000, FACLEX#XEME#85=10.000, FACLEX#XEME#86=10.000, FACLEX#XEME#87=10.000, FACLEX#XEME#88=10.000, FACLEX#XEME#89=10.000, FACLEX#XEME#9=10.000, FACLEX#XEME#90=10.000, FACLEX#XEME#91=10.000, FACLEX#XEME#92=10.000, FACLEX#XEME#93=10.000, FACLEX#XEME#94=10.000, FACLEX#XEME#95=10.000, FACLEX#XEME#96=10.000, FACLEX#XEME#97=10.000, FACLEX#XEME#98=10.000, FACLEX#XEME#99=10.000, FACLEX#XEMEDEFAULT=1.000}
[P-T4] [P-T4] Total run time 4.3920 seconds
[P-T4] [P-T4] ============ (Job train completed)
