has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:city:<a,b> $0 $1)))
has :- NP/NP : (lambda $0:e (city:city:<b,t> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:city:<a,b> $0 $1)))
have :- NP/NP : (lambda $0:e (city:city:<b,t> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (capital:capital:<a,b> $0 $1)))
has :- NP/NP : (lambda $0:e (capital:capital:<b,t> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (capital:capital:<a,b> $0 $1)))
have :- NP/NP : (lambda $0:e (capital:capital:<b,t> $0))
state :- NP/NP : (lambda $0:e (state:<a,a> $0))
state :- S/PP : (lambda $0:e (state:<a,a> $0))
state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<a,<a,t>> $1 $0)))
state :- N : state:<a,t>
city :- NP/NP : (lambda $0:e (city:<a,b> $0))
city :- S/PP : (lambda $0:e (city:<a,b> $0))
city :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<a,<b,t>> $1 $0)))
city :- N : city:<b,t>
capital :- NP/NP : (lambda $0:e (capital:<a,b> $0))
capital :- S/PP : (lambda $0:e (capital:<a,b> $0))
capital :- (S\NP)/NP : (lambda $0:e (lambda $1:e (capital:<a,<b,t>> $1 $0)))
capital :- N : capital:<b,t>
states :- NP/NP : (lambda $0:e (states:<a,a> $0))
states :- S/PP : (lambda $0:e (states:<a,a> $0))
states :- (S\NP)/NP : (lambda $0:e (lambda $1:e (states:<a,<a,t>> $1 $0)))
the state :- NP/NP : (lambda $0:e (the state:<a,a> $0))
the state :- S/PP : (lambda $0:e (the state:<a,a> $0))
the state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the state:<a,<a,t>> $1 $0)))
 :- NP/NP : (lambda $0:e (:<a,b> $0))
 :- S/PP : (lambda $0:e (:<a,b> $0))
 :- (S\NP)/NP : (lambda $0:e (lambda $1:e (:<a,<b,t>> $1 $0)))
 :- NP/NP : (lambda $0:e (:<a,b> $0))
 :- S/PP : (lambda $0:e (:<a,b> $0))
 :- (S\NP)/NP : (lambda $0:e (lambda $1:e (:<a,<b,t>> $1 $0)))
prime :- NP/NP : (lambda $0:e (prime:<a,b> $0))
prime :- S/PP : (lambda $0:e (prime:<a,b> $0))
prime :- (S\NP)/NP : (lambda $0:e (lambda $1:e (prime:<a,<b,t>> $1 $0)))
 :- NP/NP : (lambda $0:e (:<a,b> $0))
 :- S/PP : (lambda $0:e (:<a,b> $0))
 :- (S\NP)/NP : (lambda $0:e (lambda $1:e (:<a,<b,t>> $1 $0)))
higher :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (state:<a,a> $1) (state:<a,a> $0))))
 :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 state:<a,a>))
 :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 city:<a,b>))
 :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 city:<a,b>))
 :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 capital:<a,b>))
 :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 capital:<a,b>))
 :- PP/NP : (lambda $0:e (pkeyReturner:<a,a> $0))
 :- PP/NP : (lambda $0:e (lambda $1:a (setReturner:<a,<a,t>> $1 $0)))
 :- PP/NP : (lambda $0:e (pkeyReturner:<a,a> $0))
 :- PP/NP : (lambda $0:e (lambda $1:a (setReturner:<a,<a,t>> $1 $0)))
 :- PP/NP : (lambda $0:e (pkeyReturner:<b,a> $0))
 :- PP/NP : (lambda $0:e (lambda $1:a (setReturner:<a,<b,t>> $1 $0)))
 :- PP/NP : (lambda $0:e (pkeyReturner:<b,a> $0))
 :- PP/NP : (lambda $0:e (lambda $1:a (setReturner:<a,<b,t>> $1 $0)))
 :- PP/NP : (lambda $0:e (pkeyReturner:<b,a> $0))
 :- PP/NP : (lambda $0:e (lambda $1:a (setReturner:<a,<b,t>> $1 $0)))
 :- PP/NP : (lambda $0:e (pkeyReturner:<b,a> $0))
 :- PP/NP : (lambda $0:e (lambda $1:a (setReturner:<a,<b,t>> $1 $0)))