has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<c_pkey,c> $0 $1)))
has :- NP/NP : (lambda $0:e (city:<c,t> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<c_pkey,c> $0 $1)))
have :- NP/NP : (lambda $0:e (city:<c,t> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (area:<s_pkey,<i,t>> $0 $1)))
has :- NP/NP : (lambda $0:e (area:<s_pkey,i> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (area:<s_pkey,<i,t>> $0 $1)))
have :- NP/NP : (lambda $0:e (area:<s_pkey,i> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<c_pkey,<i,t>> $0 $1)))
has :- NP/NP : (lambda $0:e (population:<c_pkey,i> $0))
live :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<c_pkey,<i,t>> $0 $1)))
live :- NP/NP : (lambda $0:e (population:<c_pkey,i> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<c_pkey,<i,t>> $0 $1)))
have :- NP/NP : (lambda $0:e (population:<c_pkey,i> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (river:<r_pkey,r> $0 $1)))
has :- NP/NP : (lambda $0:e (river:<r,t> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (river:<r_pkey,r> $0 $1)))
have :- NP/NP : (lambda $0:e (river:<r,t> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (length:<r_pkey,<i,t>> $0 $1)))
has :- NP/NP : (lambda $0:e (length:<r_pkey,i> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (length:<r_pkey,<i,t>> $0 $1)))
have :- NP/NP : (lambda $0:e (length:<r_pkey,i> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<c_pkey,c> $0 $1)))
has :- NP/NP : (lambda $0:e (city:<c,t> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<c_pkey,c> $0 $1)))
have :- NP/NP : (lambda $0:e (city:<c,t> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<c_pkey,<i,t>> $0 $1)))
has :- NP/NP : (lambda $0:e (population:<c_pkey,i> $0))
live :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<c_pkey,<i,t>> $0 $1)))
live :- NP/NP : (lambda $0:e (population:<c_pkey,i> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<c_pkey,<i,t>> $0 $1)))
have :- NP/NP : (lambda $0:e (population:<c_pkey,i> $0))
borders :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
borders :- NP/NP : (lambda $0:e (state:<s,t> $0))
bordering :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
bordering :- NP/NP : (lambda $0:e (state:<s,t> $0))
border :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
border :- NP/NP : (lambda $0:e (state:<s,t> $0))
surrounds :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
surrounds :- NP/NP : (lambda $0:e (state:<s,t> $0))
surrounding :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
surrounding :- NP/NP : (lambda $0:e (state:<s,t> $0))
surround :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
surround :- NP/NP : (lambda $0:e (state:<s,t> $0))
borders :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
borders :- NP/NP : (lambda $0:e (state:<s,t> $0))
bordering :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
bordering :- NP/NP : (lambda $0:e (state:<s,t> $0))
border :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
border :- NP/NP : (lambda $0:e (state:<s,t> $0))
surrounds :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
surrounds :- NP/NP : (lambda $0:e (state:<s,t> $0))
surrounding :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
surrounding :- NP/NP : (lambda $0:e (state:<s,t> $0))
surround :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,s> $0 $1)))
surround :- NP/NP : (lambda $0:e (state:<s,t> $0))
state :- NP/NP : (lambda $0:e (state:<s_pkey,s> $0))
state :- S/PP : (lambda $0:e (state:<s_pkey,s> $0))
state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<s_pkey,<s,t>> $1 $0)))
state :- NP/PP : (lambda $0:<e,t> (lambda $1:e (state:<s_pkey,<t,s>> $1 $0($1))))
state :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (state:<s_pkey,<t,s>> $1 $0($1))))
state :- N : state:<s,t>
city :- NP/NP : (lambda $0:e (city:<s_pkey,c_pkey> $0))
city :- S/PP : (lambda $0:e (city:<s_pkey,c_pkey> $0))
city :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<s_pkey,<c_pkey,t>> $1 $0)))
city :- NP/PP : (lambda $0:<e,t> (lambda $1:e (city:<s_pkey,<t,c_pkey>> $1 $0($1))))
city :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (city:<s_pkey,<t,c_pkey>> $1 $0($1))))
city :- N : city:<c_pkey,t>
area :- NP/NP : (lambda $0:e (area:<s_pkey,i> $0))
area :- S/PP : (lambda $0:e (area:<s_pkey,i> $0))
area :- (S\NP)/NP : (lambda $0:e (lambda $1:e (area:<s_pkey,<i,t>> $1 $0)))
area :- NP/PP : (lambda $0:<e,t> (lambda $1:e (area:<s_pkey,<t,i>> $1 $0($1))))
area :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (area:<s_pkey,<t,i>> $1 $0($1))))
population :- NP/NP : (lambda $0:e (population:<s_pkey,i> $0))
population :- S/PP : (lambda $0:e (population:<s_pkey,i> $0))
population :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<s_pkey,<i,t>> $1 $0)))
population :- NP/PP : (lambda $0:<e,t> (lambda $1:e (population:<s_pkey,<t,i>> $1 $0($1))))
population :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (population:<s_pkey,<t,i>> $1 $0($1))))
river :- NP/NP : (lambda $0:e (river:<r_pkey,r> $0))
river :- S/PP : (lambda $0:e (river:<r_pkey,r> $0))
river :- (S\NP)/NP : (lambda $0:e (lambda $1:e (river:<r_pkey,<r,t>> $1 $0)))
river :- NP/PP : (lambda $0:<e,t> (lambda $1:e (river:<r_pkey,<t,r>> $1 $0($1))))
river :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (river:<r_pkey,<t,r>> $1 $0($1))))
river :- N : river:<r,t>
state :- NP/NP : (lambda $0:e (state:<r_pkey,s_pkey> $0))
state :- S/PP : (lambda $0:e (state:<r_pkey,s_pkey> $0))
state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<r_pkey,<s_pkey,t>> $1 $0)))
state :- NP/PP : (lambda $0:<e,t> (lambda $1:e (state:<r_pkey,<t,s_pkey>> $1 $0($1))))
state :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (state:<r_pkey,<t,s_pkey>> $1 $0($1))))
state :- N : state:<s_pkey,t>
length :- NP/NP : (lambda $0:e (length:<r_pkey,i> $0))
length :- S/PP : (lambda $0:e (length:<r_pkey,i> $0))
length :- (S\NP)/NP : (lambda $0:e (lambda $1:e (length:<r_pkey,<i,t>> $1 $0)))
length :- NP/PP : (lambda $0:<e,t> (lambda $1:e (length:<r_pkey,<t,i>> $1 $0($1))))
length :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (length:<r_pkey,<t,i>> $1 $0($1))))
city :- NP/NP : (lambda $0:e (city:<c_pkey,c> $0))
city :- S/PP : (lambda $0:e (city:<c_pkey,c> $0))
city :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<c_pkey,<c,t>> $1 $0)))
city :- NP/PP : (lambda $0:<e,t> (lambda $1:e (city:<c_pkey,<t,c>> $1 $0($1))))
city :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (city:<c_pkey,<t,c>> $1 $0($1))))
city :- N : city:<c,t>
state :- NP/NP : (lambda $0:e (state:<c_pkey,s_pkey> $0))
state :- S/PP : (lambda $0:e (state:<c_pkey,s_pkey> $0))
state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<c_pkey,<s_pkey,t>> $1 $0)))
state :- NP/PP : (lambda $0:<e,t> (lambda $1:e (state:<c_pkey,<t,s_pkey>> $1 $0($1))))
state :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (state:<c_pkey,<t,s_pkey>> $1 $0($1))))
state :- N : state:<s_pkey,t>
population :- NP/NP : (lambda $0:e (population:<c_pkey,i> $0))
population :- S/PP : (lambda $0:e (population:<c_pkey,i> $0))
population :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<c_pkey,<i,t>> $1 $0)))
population :- NP/PP : (lambda $0:<e,t> (lambda $1:e (population:<c_pkey,<t,i>> $1 $0($1))))
population :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (population:<c_pkey,<t,i>> $1 $0($1))))
state :- NP/NP : (lambda $0:e (state:<b_pkey,s_pkey> $0))
state :- S/PP : (lambda $0:e (state:<b_pkey,s_pkey> $0))
state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,<s_pkey,t>> $1 $0)))
state :- NP/PP : (lambda $0:<e,t> (lambda $1:e (state:<b_pkey,<t,s_pkey>> $1 $0($1))))
state :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (state:<b_pkey,<t,s_pkey>> $1 $0($1))))
state :- N : state:<s_pkey,t>
state :- NP/NP : (lambda $0:e (state:<b_pkey,s> $0))
state :- S/PP : (lambda $0:e (state:<b_pkey,s> $0))
state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<b_pkey,<s,t>> $1 $0)))
state :- NP/PP : (lambda $0:<e,t> (lambda $1:e (state:<b_pkey,<t,s>> $1 $0($1))))
state :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (state:<b_pkey,<t,s>> $1 $0($1))))
state :- N : state:<s,t>
states :- NP/NP : (lambda $0:e (states:<s_pkey,s> $0))
states :- S/PP : (lambda $0:e (states:<s_pkey,s> $0))
states :- (S\NP)/NP : (lambda $0:e (lambda $1:e (states:<s_pkey,<s,t>> $1 $0)))
the state :- NP/NP : (lambda $0:e (the state:<s_pkey,s> $0))
the state :- S/PP : (lambda $0:e (the state:<s_pkey,s> $0))
the state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the state:<s_pkey,<s,t>> $1 $0)))
cities :- NP/NP : (lambda $0:e (cities:<s_pkey,c_pkey> $0))
cities :- S/PP : (lambda $0:e (cities:<s_pkey,c_pkey> $0))
cities :- (S\NP)/NP : (lambda $0:e (lambda $1:e (cities:<s_pkey,<c_pkey,t>> $1 $0)))
live :- NP/NP : (lambda $0:e (live:<s_pkey,i> $0))
live :- S/PP : (lambda $0:e (live:<s_pkey,i> $0))
live :- (S\NP)/NP : (lambda $0:e (lambda $1:e (live:<s_pkey,<i,t>> $1 $0)))
rivers :- NP/NP : (lambda $0:e (rivers:<r_pkey,r> $0))
rivers :- S/PP : (lambda $0:e (rivers:<r_pkey,r> $0))
rivers :- (S\NP)/NP : (lambda $0:e (lambda $1:e (rivers:<r_pkey,<r,t>> $1 $0)))
the river :- NP/NP : (lambda $0:e (the river:<r_pkey,r> $0))
the river :- S/PP : (lambda $0:e (the river:<r_pkey,r> $0))
the river :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the river:<r_pkey,<r,t>> $1 $0)))
states :- NP/NP : (lambda $0:e (states:<r_pkey,s_pkey> $0))
states :- S/PP : (lambda $0:e (states:<r_pkey,s_pkey> $0))
states :- (S\NP)/NP : (lambda $0:e (lambda $1:e (states:<r_pkey,<s_pkey,t>> $1 $0)))
the state :- NP/NP : (lambda $0:e (the state:<r_pkey,s_pkey> $0))
the state :- S/PP : (lambda $0:e (the state:<r_pkey,s_pkey> $0))
the state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the state:<r_pkey,<s_pkey,t>> $1 $0)))
the city :- NP/NP : (lambda $0:e (the city:<c_pkey,c> $0))
the city :- S/PP : (lambda $0:e (the city:<c_pkey,c> $0))
the city :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the city:<c_pkey,<c,t>> $1 $0)))
the city of :- NP/NP : (lambda $0:e (the city of:<c_pkey,c> $0))
the city of :- S/PP : (lambda $0:e (the city of:<c_pkey,c> $0))
the city of :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the city of:<c_pkey,<c,t>> $1 $0)))
states :- NP/NP : (lambda $0:e (states:<c_pkey,s_pkey> $0))
states :- S/PP : (lambda $0:e (states:<c_pkey,s_pkey> $0))
states :- (S\NP)/NP : (lambda $0:e (lambda $1:e (states:<c_pkey,<s_pkey,t>> $1 $0)))
the state :- NP/NP : (lambda $0:e (the state:<c_pkey,s_pkey> $0))
the state :- S/PP : (lambda $0:e (the state:<c_pkey,s_pkey> $0))
the state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the state:<c_pkey,<s_pkey,t>> $1 $0)))
the state :- NP/NP : (lambda $0:e (the state:<b_pkey,s_pkey> $0))
the state :- S/PP : (lambda $0:e (the state:<b_pkey,s_pkey> $0))
the state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the state:<b_pkey,<s_pkey,t>> $1 $0)))
the state of :- NP/NP : (lambda $0:e (the state of:<b_pkey,s_pkey> $0))
the state of :- S/PP : (lambda $0:e (the state of:<b_pkey,s_pkey> $0))
the state of :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the state of:<b_pkey,<s_pkey,t>> $1 $0)))
next_to :- NP/NP : (lambda $0:e (next_to:<b_pkey,s_pkey> $0))
next_to :- S/PP : (lambda $0:e (next_to:<b_pkey,s_pkey> $0))
next_to :- (S\NP)/NP : (lambda $0:e (lambda $1:e (next_to:<b_pkey,<s_pkey,t>> $1 $0)))
states :- NP/NP : (lambda $0:e (states:<b_pkey,s> $0))
states :- S/PP : (lambda $0:e (states:<b_pkey,s> $0))
states :- (S\NP)/NP : (lambda $0:e (lambda $1:e (states:<b_pkey,<s,t>> $1 $0)))
the state :- NP/NP : (lambda $0:e (the state:<b_pkey,s> $0))
the state :- S/PP : (lambda $0:e (the state:<b_pkey,s> $0))
the state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the state:<b_pkey,<s,t>> $1 $0)))
next_to :- NP/NP : (lambda $0:e (next_to:<b_pkey,s> $0))
next_to :- S/PP : (lambda $0:e (next_to:<b_pkey,s> $0))
next_to :- (S\NP)/NP : (lambda $0:e (lambda $1:e (next_to:<b_pkey,<s,t>> $1 $0)))
large :- NP/NP : (lambda $0:e (area:<s_pkey,<i,t>> $0))
larger :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (area:<s_pkey,<i,t>> $1) (area:<s_pkey,<i,t>> $0))))
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 area:<s_pkey,<i,t>>))
larger :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (area:<s_pkey,<i,t>> $1) (area:<s_pkey,<i,t>> $0))))
larger :- (PP/NP)/NP : (lambda $0:e (lambda $1:<e,i> (lambda $2:e (>:<i,<i,t>> ($1 $2) ($1 $0)))))
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 area:<s_pkey,<i,t>>))
largest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
largest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
large :- NP/NP : (lambda $0:e (population:<c_pkey,<i,t>> $0))
larger :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (population:<c_pkey,<i,t>> $1) (population:<c_pkey,<i,t>> $0))))
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<c_pkey,<i,t>>))
larger :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (population:<c_pkey,<i,t>> $1) (population:<c_pkey,<i,t>> $0))))
larger :- (PP/NP)/NP : (lambda $0:e (lambda $1:<e,i> (lambda $2:e (>:<i,<i,t>> ($1 $2) ($1 $0)))))
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<c_pkey,<i,t>>))
largest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
largest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
higher :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (population:<c_pkey,<i,t>> $1) (population:<c_pkey,<i,t>> $0))))
higher :- (PP/NP)/NP : (lambda $0:e (lambda $1:<e,i> (lambda $2:e (>:<i,<i,t>> ($1 $2) ($1 $0)))))
highest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<c_pkey,<i,t>>))
highest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
highest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
long :- NP/NP : (lambda $0:e (length:<r_pkey,<i,t>> $0))
longer :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (length:<r_pkey,<i,t>> $1) (length:<r_pkey,<i,t>> $0))))
longest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 length:<r_pkey,<i,t>>))
longer :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (length:<r_pkey,<i,t>> $1) (length:<r_pkey,<i,t>> $0))))
longer :- (PP/NP)/NP : (lambda $0:e (lambda $1:<e,i> (lambda $2:e (>:<i,<i,t>> ($1 $2) ($1 $0)))))
longest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 length:<r_pkey,<i,t>>))
longest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
longest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
high :- NP/NP : (lambda $0:e (population:<c_pkey,<i,t>> $0))
higher :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (population:<c_pkey,<i,t>> $1) (population:<c_pkey,<i,t>> $0))))
higher :- (PP/NP)/NP : (lambda $0:e (lambda $1:<e,i> (lambda $2:e (>:<i,<i,t>> ($1 $2) ($1 $0)))))
highest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<c_pkey,<i,t>>))
highest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
highest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
large :- NP/NP : (lambda $0:e (population:<c_pkey,<i,t>> $0))
larger :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<c_pkey,<i,t>>))
larger :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
larger :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<c_pkey,<i,t>>))
largest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
largest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<s,s_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s,s_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:s_pkey (setretriever:<s_pkey,<s,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<s,s_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s,s_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:s_pkey (setretriever:<s_pkey,<s,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<s,s_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s,s_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:s_pkey (setretriever:<s_pkey,<s,t>> $1 $0)))
has :- PP/NP : (lambda $0:e (pkeyretriever:<i,s_pkey> $0))
has :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,s_pkey> $0))
has :- PP/NP : (lambda $0:<e,e> (lambda $1:s_pkey (setretriever:<s_pkey,<i,t>> $1 $0)))
have :- PP/NP : (lambda $0:e (pkeyretriever:<i,s_pkey> $0))
have :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,s_pkey> $0))
have :- PP/NP : (lambda $0:<e,e> (lambda $1:s_pkey (setretriever:<s_pkey,<i,t>> $1 $0)))
has :- PP/NP : (lambda $0:e (pkeyretriever:<i,s_pkey> $0))
has :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,s_pkey> $0))
has :- PP/NP : (lambda $0:<e,e> (lambda $1:s_pkey (setretriever:<s_pkey,<i,t>> $1 $0)))
have :- PP/NP : (lambda $0:e (pkeyretriever:<i,s_pkey> $0))
have :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,s_pkey> $0))
have :- PP/NP : (lambda $0:<e,e> (lambda $1:s_pkey (setretriever:<s_pkey,<i,t>> $1 $0)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<r,r_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<r,r_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:r_pkey (setretriever:<r_pkey,<r,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<r,r_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<r,r_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:r_pkey (setretriever:<r_pkey,<r,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<r,r_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<r,r_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:r_pkey (setretriever:<r_pkey,<r,t>> $1 $0)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<s_pkey,r_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s_pkey,r_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:r_pkey (setretriever:<r_pkey,<s_pkey,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<s_pkey,r_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s_pkey,r_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:r_pkey (setretriever:<r_pkey,<s_pkey,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<s_pkey,r_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s_pkey,r_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:r_pkey (setretriever:<r_pkey,<s_pkey,t>> $1 $0)))
has :- PP/NP : (lambda $0:e (pkeyretriever:<i,r_pkey> $0))
has :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,r_pkey> $0))
has :- PP/NP : (lambda $0:<e,e> (lambda $1:r_pkey (setretriever:<r_pkey,<i,t>> $1 $0)))
have :- PP/NP : (lambda $0:e (pkeyretriever:<i,r_pkey> $0))
have :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,r_pkey> $0))
have :- PP/NP : (lambda $0:<e,e> (lambda $1:r_pkey (setretriever:<r_pkey,<i,t>> $1 $0)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<c,c_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<c,c_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:c_pkey (setretriever:<c_pkey,<c,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<c,c_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<c,c_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:c_pkey (setretriever:<c_pkey,<c,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<c,c_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<c,c_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:c_pkey (setretriever:<c_pkey,<c,t>> $1 $0)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<s_pkey,c_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s_pkey,c_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:c_pkey (setretriever:<c_pkey,<s_pkey,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<s_pkey,c_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s_pkey,c_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:c_pkey (setretriever:<c_pkey,<s_pkey,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<s_pkey,c_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s_pkey,c_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:c_pkey (setretriever:<c_pkey,<s_pkey,t>> $1 $0)))
has :- PP/NP : (lambda $0:e (pkeyretriever:<i,c_pkey> $0))
has :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,c_pkey> $0))
has :- PP/NP : (lambda $0:<e,e> (lambda $1:c_pkey (setretriever:<c_pkey,<i,t>> $1 $0)))
have :- PP/NP : (lambda $0:e (pkeyretriever:<i,c_pkey> $0))
have :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,c_pkey> $0))
have :- PP/NP : (lambda $0:<e,e> (lambda $1:c_pkey (setretriever:<c_pkey,<i,t>> $1 $0)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<s_pkey,b_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s_pkey,b_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:b_pkey (setretriever:<b_pkey,<s_pkey,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<s_pkey,b_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s_pkey,b_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:b_pkey (setretriever:<b_pkey,<s_pkey,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<s_pkey,b_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s_pkey,b_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:b_pkey (setretriever:<b_pkey,<s_pkey,t>> $1 $0)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<s,b_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s,b_pkey> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:b_pkey (setretriever:<b_pkey,<s,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<s,b_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s,b_pkey> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:b_pkey (setretriever:<b_pkey,<s,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<s,b_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<s,b_pkey> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:b_pkey (setretriever:<b_pkey,<s,t>> $1 $0)))