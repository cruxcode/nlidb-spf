has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<d,f> $0 $1)))
has :- NP/NP : (lambda $0:e (city:<f,t> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<d,f> $0 $1)))
have :- NP/NP : (lambda $0:e (city:<f,t> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (area:<a,<i,t>> $0 $1)))
has :- NP/NP : (lambda $0:e (area:<a,i> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (area:<a,<i,t>> $0 $1)))
have :- NP/NP : (lambda $0:e (area:<a,i> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<d,<i,t>> $0 $1)))
has :- NP/NP : (lambda $0:e (population:<d,i> $0))
live :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<d,<i,t>> $0 $1)))
live :- NP/NP : (lambda $0:e (population:<d,i> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<d,<i,t>> $0 $1)))
have :- NP/NP : (lambda $0:e (population:<d,i> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (river:<d,f> $0 $1)))
has :- NP/NP : (lambda $0:e (river:<f,t> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (river:<d,f> $0 $1)))
have :- NP/NP : (lambda $0:e (river:<f,t> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (length:<d,<i,t>> $0 $1)))
has :- NP/NP : (lambda $0:e (length:<d,i> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (length:<d,<i,t>> $0 $1)))
have :- NP/NP : (lambda $0:e (length:<d,i> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<d,f> $0 $1)))
has :- NP/NP : (lambda $0:e (city:<f,t> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<d,f> $0 $1)))
have :- NP/NP : (lambda $0:e (city:<f,t> $0))
has :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<d,<i,t>> $0 $1)))
has :- NP/NP : (lambda $0:e (population:<d,i> $0))
live :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<d,<i,t>> $0 $1)))
live :- NP/NP : (lambda $0:e (population:<d,i> $0))
have :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<d,<i,t>> $0 $1)))
have :- NP/NP : (lambda $0:e (population:<d,i> $0))
state :- NP/NP : (lambda $0:e (state:<a,b> $0))
state :- S/PP : (lambda $0:e (state:<a,b> $0))
state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state:<a,<b,t>> $1 $0)))
state :- NP/PP : (lambda $0:<e,t> (lambda $1:e (state:<a,<t,b>> $1 $0($1))))
state :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (state:<a,<t,b>> $1 $0($1))))
state :- N : state:<b,t>
city :- NP/NP : (lambda $0:e (city:<a,c> $0))
city :- S/PP : (lambda $0:e (city:<a,c> $0))
city :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<a,<c,t>> $1 $0)))
city :- NP/PP : (lambda $0:<e,t> (lambda $1:e (city:<a,<t,c>> $1 $0($1))))
city :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (city:<a,<t,c>> $1 $0($1))))
city :- N : city:<c,t>
area :- NP/NP : (lambda $0:e (area:<a,i> $0))
area :- S/PP : (lambda $0:e (area:<a,i> $0))
area :- (S\NP)/NP : (lambda $0:e (lambda $1:e (area:<a,<i,t>> $1 $0)))
area :- NP/PP : (lambda $0:<e,t> (lambda $1:e (area:<a,<t,i>> $1 $0($1))))
area :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (area:<a,<t,i>> $1 $0($1))))
population :- NP/NP : (lambda $0:e (population:<a,i> $0))
population :- S/PP : (lambda $0:e (population:<a,i> $0))
population :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<a,<i,t>> $1 $0)))
population :- NP/PP : (lambda $0:<e,t> (lambda $1:e (population:<a,<t,i>> $1 $0($1))))
population :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (population:<a,<t,i>> $1 $0($1))))
river :- NP/NP : (lambda $0:e (river:<d,f> $0))
river :- S/PP : (lambda $0:e (river:<d,f> $0))
river :- (S\NP)/NP : (lambda $0:e (lambda $1:e (river:<d,<f,t>> $1 $0)))
river :- NP/PP : (lambda $0:<e,t> (lambda $1:e (river:<d,<t,f>> $1 $0($1))))
river :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (river:<d,<t,f>> $1 $0($1))))
river :- N : river:<f,t>
state_prime :- NP/NP : (lambda $0:e (state_prime:<d,b> $0))
state_prime :- S/PP : (lambda $0:e (state_prime:<d,b> $0))
state_prime :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state_prime:<d,<b,t>> $1 $0)))
state_prime :- NP/PP : (lambda $0:<e,t> (lambda $1:e (state_prime:<d,<t,b>> $1 $0($1))))
state_prime :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (state_prime:<d,<t,b>> $1 $0($1))))
state_prime :- N : state_prime:<b,t>
length :- NP/NP : (lambda $0:e (length:<d,i> $0))
length :- S/PP : (lambda $0:e (length:<d,i> $0))
length :- (S\NP)/NP : (lambda $0:e (lambda $1:e (length:<d,<i,t>> $1 $0)))
length :- NP/PP : (lambda $0:<e,t> (lambda $1:e (length:<d,<t,i>> $1 $0($1))))
length :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (length:<d,<t,i>> $1 $0($1))))
city :- NP/NP : (lambda $0:e (city:<d,f> $0))
city :- S/PP : (lambda $0:e (city:<d,f> $0))
city :- (S\NP)/NP : (lambda $0:e (lambda $1:e (city:<d,<f,t>> $1 $0)))
city :- NP/PP : (lambda $0:<e,t> (lambda $1:e (city:<d,<t,f>> $1 $0($1))))
city :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (city:<d,<t,f>> $1 $0($1))))
city :- N : city:<f,t>
state_prime :- NP/NP : (lambda $0:e (state_prime:<d,b> $0))
state_prime :- S/PP : (lambda $0:e (state_prime:<d,b> $0))
state_prime :- (S\NP)/NP : (lambda $0:e (lambda $1:e (state_prime:<d,<b,t>> $1 $0)))
state_prime :- NP/PP : (lambda $0:<e,t> (lambda $1:e (state_prime:<d,<t,b>> $1 $0($1))))
state_prime :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (state_prime:<d,<t,b>> $1 $0($1))))
state_prime :- N : state_prime:<b,t>
population :- NP/NP : (lambda $0:e (population:<d,i> $0))
population :- S/PP : (lambda $0:e (population:<d,i> $0))
population :- (S\NP)/NP : (lambda $0:e (lambda $1:e (population:<d,<i,t>> $1 $0)))
population :- NP/PP : (lambda $0:<e,t> (lambda $1:e (population:<d,<t,i>> $1 $0($1))))
population :- NP/(S\NP) : (lambda $0:<e,t> (lambda $1:e (population:<d,<t,i>> $1 $0($1))))
states :- NP/NP : (lambda $0:e (states:<a,b> $0))
states :- S/PP : (lambda $0:e (states:<a,b> $0))
states :- (S\NP)/NP : (lambda $0:e (lambda $1:e (states:<a,<b,t>> $1 $0)))
the state :- NP/NP : (lambda $0:e (the state:<a,b> $0))
the state :- S/PP : (lambda $0:e (the state:<a,b> $0))
the state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the state:<a,<b,t>> $1 $0)))
cities :- NP/NP : (lambda $0:e (cities:<a,c> $0))
cities :- S/PP : (lambda $0:e (cities:<a,c> $0))
cities :- (S\NP)/NP : (lambda $0:e (lambda $1:e (cities:<a,<c,t>> $1 $0)))
live :- NP/NP : (lambda $0:e (live:<a,i> $0))
live :- S/PP : (lambda $0:e (live:<a,i> $0))
live :- (S\NP)/NP : (lambda $0:e (lambda $1:e (live:<a,<i,t>> $1 $0)))
rivers :- NP/NP : (lambda $0:e (rivers:<d,f> $0))
rivers :- S/PP : (lambda $0:e (rivers:<d,f> $0))
rivers :- (S\NP)/NP : (lambda $0:e (lambda $1:e (rivers:<d,<f,t>> $1 $0)))
the river :- NP/NP : (lambda $0:e (the river:<d,f> $0))
the river :- S/PP : (lambda $0:e (the river:<d,f> $0))
the river :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the river:<d,<f,t>> $1 $0)))
states :- NP/NP : (lambda $0:e (states:<d,b> $0))
states :- S/PP : (lambda $0:e (states:<d,b> $0))
states :- (S\NP)/NP : (lambda $0:e (lambda $1:e (states:<d,<b,t>> $1 $0)))
the state :- NP/NP : (lambda $0:e (the state:<d,b> $0))
the state :- S/PP : (lambda $0:e (the state:<d,b> $0))
the state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the state:<d,<b,t>> $1 $0)))
rivers :- NP/NP : (lambda $0:e (rivers:<d,f> $0))
rivers :- S/PP : (lambda $0:e (rivers:<d,f> $0))
rivers :- (S\NP)/NP : (lambda $0:e (lambda $1:e (rivers:<d,<f,t>> $1 $0)))
the city :- NP/NP : (lambda $0:e (the city:<d,f> $0))
the city :- S/PP : (lambda $0:e (the city:<d,f> $0))
the city :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the city:<d,<f,t>> $1 $0)))
the city of :- NP/NP : (lambda $0:e (the city of:<d,f> $0))
the city of :- S/PP : (lambda $0:e (the city of:<d,f> $0))
the city of :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the city of:<d,<f,t>> $1 $0)))
states :- NP/NP : (lambda $0:e (states:<d,b> $0))
states :- S/PP : (lambda $0:e (states:<d,b> $0))
states :- (S\NP)/NP : (lambda $0:e (lambda $1:e (states:<d,<b,t>> $1 $0)))
the state :- NP/NP : (lambda $0:e (the state:<d,b> $0))
the state :- S/PP : (lambda $0:e (the state:<d,b> $0))
the state :- (S\NP)/NP : (lambda $0:e (lambda $1:e (the state:<d,<b,t>> $1 $0)))
large :- NP/NP : (lambda $0:e (area:<a,<i,t>> $0))
larger :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (area:<a,<i,t>> $1) (area:<a,<i,t>> $0))))
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 area:<a,<i,t>>))
larger :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (area:<a,<i,t>> $1) (area:<a,<i,t>> $0))))
larger :- (PP/NP)/NP : (lambda $0:e (lambda $1:<e,i> (lambda $2:e (>:<i,<i,t>> ($1 $2) ($1 $0)))))
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 area:<a,<i,t>>))
largest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
largest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
large :- NP/NP : (lambda $0:e (population:<d,<i,t>> $0))
larger :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (population:<d,<i,t>> $1) (population:<d,<i,t>> $0))))
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<d,<i,t>>))
larger :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (population:<d,<i,t>> $1) (population:<d,<i,t>> $0))))
larger :- (PP/NP)/NP : (lambda $0:e (lambda $1:<e,i> (lambda $2:e (>:<i,<i,t>> ($1 $2) ($1 $0)))))
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<d,<i,t>>))
largest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
largest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
higher :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (population:<d,<i,t>> $1) (population:<d,<i,t>> $0))))
higher :- (PP/NP)/NP : (lambda $0:e (lambda $1:<e,i> (lambda $2:e (>:<i,<i,t>> ($1 $2) ($1 $0)))))
highest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<d,<i,t>>))
highest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
highest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
long :- NP/NP : (lambda $0:e (length:<d,<i,t>> $0))
longer :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (length:<d,<i,t>> $1) (length:<d,<i,t>> $0))))
longest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 length:<d,<i,t>>))
longer :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (length:<d,<i,t>> $1) (length:<d,<i,t>> $0))))
longer :- (PP/NP)/NP : (lambda $0:e (lambda $1:<e,i> (lambda $2:e (>:<i,<i,t>> ($1 $2) ($1 $0)))))
longest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 length:<d,<i,t>>))
longest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
longest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
high :- NP/NP : (lambda $0:e (population:<d,<i,t>> $0))
higher :- PP/NP : (lambda $0:e (lambda $1:e (>:<i,<i,t>> (population:<d,<i,t>> $1) (population:<d,<i,t>> $0))))
higher :- (PP/NP)/NP : (lambda $0:e (lambda $1:<e,i> (lambda $2:e (>:<i,<i,t>> ($1 $2) ($1 $0)))))
highest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<d,<i,t>>))
highest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
highest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
large :- NP/NP : (lambda $0:e (population:<d,<i,t>> $0))
larger :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<d,<i,t>>))
larger :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
larger :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
largest :- NP/N : (lambda $0:<e,t> (argmax:<<e,t>,<<e,i>,e>> $0 population:<d,<i,t>>))
largest :- (NP/N)/N : (lambda $0:<e,e> (lambda $1:<e,t> (argmax:<<e,t>,<<e,i>,e>> $1 $0)))
largest :- (NP/N)/N : (lambda $0:<e,t> (lambda $1:<e,e> (argmax:<<e,t>,<<e,i>,e>> $0 $1)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<b,a> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<b,a> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:a (setretriever:<a,<b,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<b,a> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<b,a> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:a (setretriever:<a,<b,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<b,a> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<b,a> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:a (setretriever:<a,<b,t>> $1 $0)))
has :- PP/NP : (lambda $0:e (pkeyretriever:<i,a> $0))
has :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,a> $0))
has :- PP/NP : (lambda $0:<e,e> (lambda $1:a (setretriever:<a,<i,t>> $1 $0)))
have :- PP/NP : (lambda $0:e (pkeyretriever:<i,a> $0))
have :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,a> $0))
have :- PP/NP : (lambda $0:<e,e> (lambda $1:a (setretriever:<a,<i,t>> $1 $0)))
has :- PP/NP : (lambda $0:e (pkeyretriever:<i,a> $0))
has :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,a> $0))
has :- PP/NP : (lambda $0:<e,e> (lambda $1:a (setretriever:<a,<i,t>> $1 $0)))
have :- PP/NP : (lambda $0:e (pkeyretriever:<i,a> $0))
have :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,a> $0))
have :- PP/NP : (lambda $0:<e,e> (lambda $1:a (setretriever:<a,<i,t>> $1 $0)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<f,d> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<f,d> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<f,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<f,d> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<f,d> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<f,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<f,d> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<f,d> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<f,t>> $1 $0)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<b,d> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<b,d> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<b,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<b,d> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<b,d> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<b,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<b,d> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<b,d> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<b,t>> $1 $0)))
has :- PP/NP : (lambda $0:e (pkeyretriever:<i,d> $0))
has :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,d> $0))
has :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<i,t>> $1 $0)))
have :- PP/NP : (lambda $0:e (pkeyretriever:<i,d> $0))
have :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,d> $0))
have :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<i,t>> $1 $0)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<f,d> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<f,d> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<f,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<f,d> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<f,d> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<f,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<f,d> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<f,d> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<f,t>> $1 $0)))
in :- PP/NP : (lambda $0:e (pkeyretriever:<b,d> $0))
in :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<b,d> $0))
in :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<b,t>> $1 $0)))
of :- PP/NP : (lambda $0:e (pkeyretriever:<b,d> $0))
of :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<b,d> $0))
of :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<b,t>> $1 $0)))
is :- PP/NP : (lambda $0:e (pkeyretriever:<b,d> $0))
is :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<b,d> $0))
is :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<b,t>> $1 $0)))
has :- PP/NP : (lambda $0:e (pkeyretriever:<i,d> $0))
has :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,d> $0))
has :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<i,t>> $1 $0)))
have :- PP/NP : (lambda $0:e (pkeyretriever:<i,d> $0))
have :- PP/NP : (lambda $0:<e,e> (pkeyretriever:<i,d> $0))
have :- PP/NP : (lambda $0:<e,e> (lambda $1:d (setretriever:<d,<i,t>> $1 $0)))